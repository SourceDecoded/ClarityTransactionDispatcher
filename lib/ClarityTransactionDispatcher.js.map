{"version":3,"sources":["../src/ClarityTransactionDispatcher.js"],"names":["fs","uuid","resolvedPromise","Promise","resolve","ENTITIES_COLLECTION","SYSTEM_DATA_COLLECTION","NOTICE","ClarityTransactionDispatcher","mongoDb","Error","isInitialized","ObjectID","getObjectID","systems","services","entityQueue","Map","collectionName","item","modifiedDate","Date","createdDate","_getDatabaseAsync","then","db","collection","insertOne","result","_id","insertedId","entity","components","forEach","component","filter","findOne","sort","pageSize","find","limit","parseInt","toArray","count","getDatabaseAsync","system","systemGuid","getGuid","_findOneAsync","systemData","newSystemData","_addItemToCollectionAsync","_invokeMethodAsync","_updateItemInCollectionAsync","catch","error","logError","message","obj","methodName","args","returnValue","apply","reduce","promise","deleteOne","update","_assertIsStarted","newEntity","revision","Array","isArray","_assignObjectIdsToComponents","_notifySystemsWithRecoveryAsync","validateEntityToBeAddedAsync","Object","freeze","name","service","validateSystem","reject","push","_initializingSystemAsync","logMessage","type","getName","_notifySystemsAsync","deactivatedPromise","index","indexOf","splice","disposedPromise","config","lastId","lastModifiedDate","lastCreatedDate","$gt","_findAsync","notifySystemsPromises","entities","map","all","entityId","_getCountAsync","warning","_removeItemfromCollection","startAsync","stopAsync","updatedEntity","oldEntity","validateEntityToBeUpdatedAsync","toString","currentRevision"],"mappings":"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","file":"ClarityTransactionDispatcher.js","sourcesContent":["import * as fs from \"fs\";\nimport * as uuid from \"node-uuid\";\n\nconst resolvedPromise = Promise.resolve(null);\n\nconst ENTITIES_COLLECTION = \"entities\";\nconst SYSTEM_DATA_COLLECTION = \"systemData\";\nconst NOTICE = \"notice\";\n\n/**\n * Class that organizes systems to respond to data transactions.\n * The dispatcher manages the life-cycle of data entities. They can be\n * added, updated, and removed. The dispatcher is not responsible\n * for anything beyond this. It will notify the systems when any entity \n * has been added, updated, and removed. This allows the dispatcher \n * to remain unopinionated about tasks to run when a certain entity is \n * added, updated, or removed.\n * \n * The idea behind the dispatcher is to handle the complexity of the IoT.\n * There are many systems, devices, and other technologies that need to \n * communicate for a company to run smoothly. We believe that the answer to \n * these needs is a data dispatcher which lets all independent systems know\n * about data changes.\n */\nexport default class ClarityTransactionDispatcher {\n\n    /**\n     * Create a Dispatcher.\n     * @constructor\n     * @param {clairty.MongoDb} mongoDb \n     */\n    constructor(mongoDb) {\n        if (mongoDb == null) {\n            throw new Error(\"Null Argument exception: There needs to be a MongoDb.\");\n        }\n\n        this.isInitialized = false;\n        this.mongoDb = mongoDb;\n        this.ObjectID = mongoDb.getObjectID();\n        this.systems = [];\n        this.services = {};\n        this.entityQueue = new Map();\n    }\n\n    /**\n     * Add an item to a collection into mongodb.\n     * @private \n     * @param {string} collectionName - The mongodb collection name.\n     * @param {object} item - The item to be added.\n     */\n    _addItemToCollectionAsync(collectionName, item) {\n        item.modifiedDate = new Date();\n        item.createdDate = new Date();\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.insertOne(item);\n        }).then((result) => {\n            item._id = result.insertedId;\n            return item;\n        });\n    }\n\n    /**\n     * Ensures the mongodb is ready by asserting that it has been successfully started.\n     */\n    _assertIsStarted() {\n        if (!this.isInitialized) {\n            throw new Error(\"The dispatcher needs to be started before calling any other method.\");\n        }\n    }\n\n    /**\n     * \n     * @param {IEntity} entity - The entity to manage component id's to. \n     */\n    _assignObjectIdsToComponents(entity) {\n        entity.components.forEach(component => {\n            if (!component._id) {\n                component._id = this.ObjectID();\n            } else {\n                component._id = this.ObjectID(component._id);\n            }\n        });\n    }\n\n    /** \n     * Find one in a collection.\n     * @private\n     */\n    _findOneAsync(collectionName, filter) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.findOne(filter);\n        });\n    }\n\n    /** \n    * Find many in a collection.\n    * @private\n    */\n    _findAsync(collectionName, filter, sort, pageSize) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.find(filter).limit(parseInt(pageSize, 10)).sort(sort).toArray();\n        });\n    }\n\n    /** \n     * Get count in a collection.\n     * @private\n     */\n    _getCountAsync(collectionName) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.count();\n        });\n    }\n\n    /**\n     * Get a mongodb.\n     * @private\n     * @returns {Promise<mongodb>}\n     */\n    _getDatabaseAsync() {\n        return this.mongoDb.getDatabaseAsync();\n    }\n\n    /**\n     * Initialize a system.\n     * @private\n     */\n    _initializingSystemAsync(system) {\n        let systemGuid = system.getGuid();\n\n        let filter = {\n            systemGuid\n        };\n\n        return this._findOneAsync(SYSTEM_DATA_COLLECTION, filter).then((systemData) => {\n            if (systemData == null) {\n                let newSystemData = {\n                    systemGuid,\n                    isInitialized: false\n                };\n\n                return this._addItemToCollectionAsync(SYSTEM_DATA_COLLECTION, newSystemData);\n            } else {\n                return systemData;\n            }\n        }).then((systemData) => {\n            if (!systemData.isInitialized) {\n                return this._invokeMethodAsync(system, \"initializeAsync\", [this]).then(() => {\n                    systemData.isInitialized = true;\n                    return this._updateItemInCollectionAsync(SYSTEM_DATA_COLLECTION, systemData);\n                });\n            }\n        }).catch((error) => {\n            this.logError({ message: error.message });\n            throw error;\n        });\n    }\n\n    /**\n     * Invoke a method on any object and make sure a promise is the returned value.\n     * @private\n     */\n    _invokeMethodAsync(obj, methodName, args) {\n        var returnValue;\n\n        if (typeof obj[methodName] === \"function\") {\n            returnValue = obj[methodName].apply(obj, args);\n            if (!(returnValue instanceof Promise)) {\n                returnValue = Promise.resolve(returnValue);\n            }\n        } else {\n            returnValue = resolvedPromise;\n        }\n\n        return returnValue;\n    }\n\n    /**\n     * Notify the systems of a life cycle by its method name.\n     * @private\n     * @returns {Promise<undefined>}\n     */\n    _notifySystemsAsync(methodName, args) {\n        return this.systems.reduce((promise, system) => {\n\n            return promise.then(() => {\n\n                try {\n                    return this._invokeMethodAsync(system, methodName, args);\n                } catch (error) {\n                    this.logError(error);\n                    throw error;\n                }\n\n            });\n\n        }, resolvedPromise);\n    }\n\n    /**\n       * Notify the systems of a life cycle by its method name and recover if \n       * any of the systems reject the promise.\n       * \n       * This will be used for most life-cycle calls. The other systems need to respond \n       * regardless of other systems failing.\n       * @private\n       * @returns {Promise<undefined>}\n       */\n    _notifySystemsWithRecoveryAsync(methodName, args) {\n        return this.systems.reduce((promise, system) => {\n\n            return promise.then(() => {\n\n                try {\n                    return this._invokeMethodAsync(system, methodName, args);\n                } catch (error) {\n                    this.logError(error);\n                    throw error;\n                }\n\n            }).catch(() => {\n                return resolvedPromise;\n            });\n\n        }, resolvedPromise);\n    }\n\n    /**\n     * Remove an item from a collection.\n     * @private\n     * @returns {Promise<undefined>}\n     */\n    _removeItemfromCollection(collectionName, item) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.deleteOne({\n                _id: this.ObjectID(item._id)\n            });\n        });\n    }\n\n    /**\n     * Update an item in a collection.\n     * @private\n     * @returns {Promise<undefined>}\n     */\n    _updateItemInCollectionAsync(collectionName, item) {\n        item.modifiedDate = new Date();\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.update({\n                _id: this.ObjectID(item._id)\n            }, item, null);\n        });\n    }\n\n    /**\n     * Add an Entity to the datastore. The steps the dispatcher takes when saving an\n     * entity are.\n     * \n     * - Have the Systems prepare the entity to be inserted with prepareEntityToBeAddedAsync.\n     * - Validate the entity with all systems. All systems have to validate to pass.\n     * - Save the entity to the datastore.\n     * - Notify the systems that an entity has been added with entityAddedAsync.\n     * @param {IEntity} entity - The entity that you want to save to the datastore.\n     * @return {Promise<Entity>}\n     */\n    addEntityAsync(entity) {\n        this._assertIsStarted();\n\n        let newEntity = {\n            _id: entity._id ? this.ObjectID(entity._id) : this.ObjectID(),\n            revision: this.ObjectID(),\n            components: Array.isArray(entity.components) ? entity.components : []\n        };\n\n        this._assignObjectIdsToComponents(newEntity);\n\n        return this._notifySystemsWithRecoveryAsync(\"prepareEntityToBeAddedAsync\", [newEntity]).then(() => {\n            this.validateEntityToBeAddedAsync(newEntity);\n        }).then(() => {\n            return this._addItemToCollectionAsync(ENTITIES_COLLECTION, newEntity);\n        }).then(entity => {\n            return this._notifySystemsWithRecoveryAsync(\"entityAddedAsync\", [Object.freeze(entity)]).then(() => {\n                return entity;\n            });\n        }).catch(error => {\n            this.logError(error);\n            throw error;\n        });\n    }\n\n    /**\n     * Add a service for systems to use. Services could be HTTP services,\n     * or governance that needs to be shared acrossed systems.\n     * @param {string} name - The name by which the systems will request the service.\n     * @param {object} service - The service.\n     * @return {Promise<undefined>}\n     */\n    addServiceAsync(name, service) {\n        this._assertIsStarted();\n\n        this.services[name] = service;\n        return resolvedPromise;\n    }\n\n    /**\n     * Add a system to the dispatcher. The systems are really where the work \n     * is done. They listen to the life-cycle of the entity and react based\n     * on the composition of components.\n     * The dispatcher does the following when adding a system.\n     * \n     * - Adds the system.\n     * - Invokes initializeAsync if the system hasn't been initialized before.\n     * - Invokes activatedAsync after initializeAsync is finished.\n     * \n     * #### Required System Methods\n     * - getGuid()\n     * - getName()\n     * \n     * #### Optional System Methods\n     *  - activatedAsync(clarityTransactionDispatcher: ClarityTransactionDispatcher)\n     *  - approveEntityToBeRemovedAsync(entity: IEntity)\n     *  - deactivatedAsync()\n     *  - disposeAsync()\n     *  - entityAddedAsync(entity: IEntity)\n     *  - entityRemovedAsync(entity: IEntity)\n     *  - entityRetrievedAsync(entity: IEntity)\n     *  - entityUpdatedAsync(oldEntity: IEntity, updatedEntity: IEntity)\n     *  - initializeAsync(clarityTransactionDispatcher: ClarityTransactionDispatcher)\n     *  - logError(error: { type?: string; message?: string; })\n     *  - logMessage(message: { type?: string; message?: string; })\n     *  - logWarning(warning: { type?: string; message?: string; })\n     *  - prepareEntityToBeAddedAsync(enitty: IEntity)\n     *  - prepareEntityToBeUpdatedAsync(oldEntity: IEntity, entity: IEntity)\n     *  - serviceRemovedAsync(name: string)\n     *  - validateEntityToBeAddedAsync(entity: IEntity)\n     *  - validateEntityToBeUpdatedAsync(oldEnitty: IEntity, entity: IEntity)\n     * @param {ISystem} system - The system to add.\n     * @return {Promise} - An undefined Promise.\n     */\n    addSystemAsync(system) {\n        this._assertIsStarted();\n\n        if (!this.validateSystem(system)) {\n            return Promise.reject(new Error(\"Invalid system: Systems need to have a getName and a getGuid method on them.\"));\n        } else {\n            this.systems.push(system);\n            return this._initializingSystemAsync(system).then(() => {\n                this.logMessage({\n                    type: NOTICE,\n                    message: `System \"${system.getName()}\" was initialized.`\n                });\n\n                return this._invokeMethodAsync(system, \"activatedAsync\", [this]);\n            }).then(() => {\n                this.logMessage({\n                    type: NOTICE,\n                    message: `System \"${system.getName()}\" was activated.`\n                });\n            }).catch(error => {\n                this.logError(error);\n                throw error;\n            });\n        }\n    }\n\n    /**\n   * Approves whether an entity can be removed. Systems can deny the ability to remove entities.\n   * @param entity {object} - The entity to be removed.\n   */\n    approveEntityToBeRemovedAsync(entity) {\n        this._assertIsStarted();\n\n        return this._notifySystemsAsync(\"approveEntityToBeRemovedAsync\", [entity]);\n    }\n\n    /**\n     * Deactivates a system and removes it from the systems being notified. To activate again use addSystemAsync.\n     * Think of this like a pause. The dispatcher calls deactivatedAsync on the system being removed.\n     * @param {ISystem} system - The system to be deactivate.\n     * @returns {Promise<undefined>} - Resolves when the system is deactivated.\n     */\n    deactivateSystemAsync(system) {\n        this._assertIsStarted();\n\n        let deactivatedPromise;\n        let index = this.systems.indexOf(system);\n\n        if (index === -1) {\n            return Promise.reject(new Error(\"Couldn't find system to be deactivated.\"));\n        } else {\n\n            this.systems.splice(index, 1);\n\n            try {\n                return deactivatedPromise = this._invokeMethodAsync(system, \"deactivatedAsync\", []).then(() => {\n                    this.logMessage({\n                        type: NOTICE,\n                        message: `System \"${system.getName()}\" was deactivated.`\n                    });\n                }).catch(() => {\n                    return resolvedPromise;\n                });\n            } catch (error) {\n                return resolvedPromise;\n            }\n        }\n    }\n\n    /**\n     * Disposes a system and removes it from the systems being notified. Use when removing systems for\n     * good. This allows the system to clean up after itself if needed. The dispatcher calls disposeAsync on the system being removed.\n     * @param {ISystem} system - The system to be disposed.\n     * @returns {Promise<undefined>} - Resolves when the system is disposed.\n     */\n    disposeSystemAsync(system) {\n        this._assertIsStarted();\n\n        var disposedPromise;\n        var index = this.systems.indexOf(system);\n\n        if (index === -1) {\n            return Promise.reject(new Error(\"Couldn't find system to be disposed.\"));\n        } else {\n\n            this.systems.splice(index, 1);\n\n            try {\n                return disposedPromise = this._invokeMethodAsync(system, \"disposeAsync\", []).then(() => {\n                    this.logMessage({\n                        type: NOTICE,\n                        message: `System \"${system.getName()}\" was disposed.`\n                    });\n                }).catch(() => {\n                    return resolvedPromise;\n                });\n            } catch (error) {\n                return resolvedPromise;\n            }\n        }\n    }\n\n    /**\n     * Page through entities using the lastId from a previous query. Use null or undefined to begin at the beginning.\n     * @param config {} - The configuration of the query. It takes a lastId, pageSize, lastModifiedDate, and a lastCreatedDate. \n     */\n    getEntitiesAsync(config) {\n        this._assertIsStarted();\n        config = config || {};\n\n        let lastId = config.lastId ? this.ObjectID(config.lastId) : null;\n        let pageSize = config.pageSize < 50 ? config.pageSize : 50;\n        let lastModifiedDate = config.lastModifiedDate;\n        let lastCreatedDate = config.lastCreatedDate;\n\n        let sort = {};\n        let filter = {};\n\n        if (lastId != null) {\n            filter._id = {\n                $gt: lastId\n            };\n        }\n\n        sort._id = 1;\n\n        if (lastCreatedDate != null) {\n            filter.createdDate = {\n                $gt: lastCreatedDate\n            };\n            sort.createdDate = 1;\n        }\n\n        if (lastModifiedDate != null) {\n            filter.modifiedDate = {\n                $gt: lastModifiedDate\n            };\n            sort.modifiedDate = 1;\n        }\n\n        return this._findAsync(ENTITIES_COLLECTION, filter, sort, pageSize).then(entities => {\n            let notifySystemsPromises = entities.map(entity => {\n                return this._notifySystemsWithRecoveryAsync(\"entityRetrievedAsync\", [entity]);\n            });\n\n            return Promise.all(notifySystemsPromises).then(() => {\n                return entities;\n            });\n        }).catch(error => {\n            this.logError(error);\n            throw error;\n        });\n    }\n\n    /**\n     * Get an entity by its id.\n     * @param {string} entityId - The id of the desired entity.\n     * @return {Promise<Entity>} - A Promise resolved with the entity or null.\n     */\n    getEntityByIdAsync(entityId) {\n        this._assertIsStarted();\n\n        return this._findOneAsync(ENTITIES_COLLECTION, {\n            _id: this.ObjectID(entityId)\n        }).then(entity => {\n            return this._notifySystemsWithRecoveryAsync(\"entityRetrievedAsync\", [entity]).then(() => {\n                return entity;\n            });\n        }).catch((error) => {\n            this.logError(error);\n            throw error;\n        });\n    }\n\n    /**\n     * Get count for all entities in collection.\n     */\n    getEntityCountAsync() {\n        this._assertIsStarted();\n\n        return this._getCountAsync(ENTITIES_COLLECTION);\n    }\n\n    /**\n     * Get a service by the name given.\n     * @param {string} name - The name of the desired service.\n     * @returns {object} - Null or the desired service.\n     */\n    getService(name) {\n        this._assertIsStarted();\n\n        return this.services[name] || null;\n    }\n\n    /**\n     * Get all systems.\n     * @returns {Array<ISystems>}\n     */\n    getSystems() {\n        this._assertIsStarted();\n\n        return this.systems;\n    }\n\n    /**\n     * Notifies the systems about an error.\n     * @param error {object} - The error to be sent to the systems.\n     * @returns {undefined}\n     */\n    logError(error) {\n        this._assertIsStarted();\n\n        this._notifySystemsAsync(\"logError\", [error]);\n    }\n\n    /**\n     * Notifies the systems about a message.\n     * @param message {object} - The message to be sent to the systems.\n     * @returns {undefined}\n     */\n    logMessage(message) {\n        this._assertIsStarted();\n\n        this._notifySystemsAsync(\"logMessage\", [message]);\n    }\n\n    /**\n     * Notifies the systems about a warning.\n     * @param warning {object} - The warning to be sent to the systems.\n     * @returns {undefined}\n     */\n    logWarning(warning) {\n        this._assertIsStarted();\n\n        this._notifySystemsAsync(\"logWarning\", [warning]);\n    }\n\n    /**\n     * Removes the entity and notifies the systems the entity has been removed.\n     * @param {IEntity} entity - The entity to be removed.\n     * @returns {Promise<undefined>} \n     */\n    removeEntityAsync(entity) {\n        this._assertIsStarted();\n\n        return this._removeItemfromCollection(ENTITIES_COLLECTION, entity).then(() => {\n            return this._notifySystemsWithRecoveryAsync(\"entityRemovedAsync\", [Object.freeze(entity)]);\n        }).then(() => {\n            return entity;\n        }).catch(error => {\n            this.logError(error);\n            throw error;\n        });\n    }\n\n    /**\n     * Removes a service by its name. The dispatcher will notify the systems that this service is being \n     * removed.\n     * @param {string} name - The name of the service to be removed.\n     * @returns {undefined}\n     */\n    removeServiceAsync(name) {\n        this._assertIsStarted();\n\n        if (this.services[name]) {\n            delete this.services[name];\n            return this._notifySystemsWithRecoveryAsync(\"serviceRemovedAsync\", [name]);\n        } else {\n            var error = Error(\"Couldn't find service to be removed.\");\n            this.logError(error);\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Starts the database.\n     */\n    startAsync() {\n        return this.mongoDb.startAsync().then(() => {\n            this.isInitialized = true;\n        });\n    }\n\n    /**\n     * Stops the database. This will deactivate all the systems so they know that they are about \n     * to be turned off. This will allow the systems to turn off processes gracefully that they \n     * manage.\n     */\n    stopAsync() {\n        return this._notifySystemsWithRecoveryAsync(\"deactivatedAsync\", []).then(() => {\n            return this.mongoDb.stopAsync();\n        });\n    }\n\n    /**\n     * Update an entity. The dispatcher will perform the following actions when updating.\n     * \n     * - Validate the entity. All interested systems need to validate to pass.\n     * - Entity's updates are saved.\n     * - The systems are notified about the update.\n     * @param {object} entity - The updated entity.\n     * @returns {Promise<undefined>} - Resolves when the entity is saved.\n     */\n    updateEntityAsync(entity) {\n        let updatedEntity = {\n            _id: entity._id ? this.ObjectID(entity._id) : this.ObjectID,\n            revision: this.ObjectID(entity.revision),\n            components: Array.isArray(entity.components) ? entity.components : []\n        };\n\n        this._assignObjectIdsToComponents(updatedEntity);\n\n        return this._findOneAsync(ENTITIES_COLLECTION, {\n            _id: updatedEntity._id\n        }).then((oldEntity) => {\n            return this._notifySystemsWithRecoveryAsync(\"prepareEntityToBeUpdatedAsync\", [oldEntity, updatedEntity]).then(() => {\n                return this.validateEntityToBeUpdatedAsync(updatedEntity);\n            }).then(() => {\n                return oldEntity;\n            });\n        }).then((oldEntity) => {\n\n            if (oldEntity.revision.toString() !== updatedEntity.revision.toString()) {\n                var error = new Error(\"Entity out of date.\");\n                error.name = \"OutOfDate\";\n                error.currentRevision = oldEntity;\n\n                throw error;\n            }\n\n            updatedEntity._id = oldEntity._id;\n            updatedEntity.revision = this.ObjectID();\n            updatedEntity.createdDate = oldEntity.createdDate;\n\n            return this._updateItemInCollectionAsync(ENTITIES_COLLECTION, updatedEntity).then((oldEntity) => {\n                return this._notifySystemsWithRecoveryAsync(\"entityUpdatedAsync\", [oldEntity, Object.freeze(updatedEntity)]);\n            }).then(() => {\n                return updatedEntity;\n            });\n\n        }).catch((error) => {\n            this.logError(error);\n            throw error;\n        });\n\n    }\n\n    /**\n     * This allows systems to validate the entity that will be added.\n     */\n    validateEntityToBeAddedAsync(entity) {\n        return this._notifySystemsAsync(\"validateEntityToBeAddedAsync\", [entity]);\n    }\n\n    /**\n     * This allows systems to validate the entity that will be updated.\n     */\n    validateEntityToBeUpdatedAsync(entity) {\n        return this._notifySystemsAsync(\"validateEntityToBeUpdatedAsync\", [entity]);\n    }\n\n    /**\n     * Ensures the system has the required methods.\n     * @param {ISystem} system - The System to be validated.\n     */\n    validateSystem(system) {\n        if (typeof system.getGuid !== \"function\" ||\n            typeof system.getName !== \"function\") {\n            return false;\n        }\n\n        return true;\n    }\n}"]}