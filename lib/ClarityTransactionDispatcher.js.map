{"version":3,"sources":["../src/ClarityTransactionDispatcher.js"],"names":["fs","uuid","resolvedPromise","Promise","resolve","ENTITIES_COLLECTION","SYSTEM_DATA_COLLECTION","NOTICE","DATABASE_URL","ClarityTransactionDispatcher","mongoDb","ObjectID","getObjectID","systems","services","collectionName","item","modifiedDate","Date","createdDate","_getDatabaseAsync","then","db","collection","insertOne","result","_id","insertedId","obj","JSON","parse","stringify","filter","findOne","sort","pageSize","find","limit","parseInt","toArray","count","getDatabaseAsync","system","systemGuid","getGuid","_findOneAsync","systemData","newSystemData","isInitialized","_addItemToCollectionAsync","_invokeMethodAsync","_updateItemInCollectionAsync","catch","error","logErrorAsync","message","methodName","args","returnValue","apply","reduce","promise","deleteOne","update","entity","newEntity","components","Array","isArray","forEach","component","_notifySystemsWithRecoveryAsync","validateEntityToBeAddedAsync","name","service","validateSystem","reject","Error","push","_initializingSystemAsync","logMessageAsync","type","getName","_notifySystemsAsync","deactivatedPromise","index","indexOf","splice","disposedPromise","databaseName","config","lastId","lastModifiedDate","lastCreatedDate","$gt","_findAsync","notifySystemsPromises","entities","map","all","entityId","_getCountAsync","warning","approveEntityToBeRemovedAsync","_removeItemfromCollection","startAsync","stopAsync","oldEntity","updatedEntity","validateEntityToBeUpdatedAsync"],"mappings":"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","file":"ClarityTransactionDispatcher.js","sourcesContent":["import * as fs from \"fs\";\nimport * as uuid from \"node-uuid\";\nimport Query from \"./Query\";\n\nconst resolvedPromise = Promise.resolve(null);\nconst ENTITIES_COLLECTION = \"entities\";\nconst SYSTEM_DATA_COLLECTION = \"systemData\";\nconst NOTICE = \"notice\";\nconst DATABASE_URL = \"clarity_transaction_dispatcher\";\n/**\n * Class that organizes systems to respond to data transactions.\n * The dispatcher manages the life-cycle of data entities. They can be\n * added, updated, and removed. The dispatcher is not responsible\n * for anything beyond this. It will notify the systems when any entity\n * has been added, updated, and removed. This allows the dispatcher\n * to remain unopinionated about tasks to run when a certain entity is\n * added, updated, or removed.\n *\n * The idea behind the dispatcher is to handle the complexity of the IoT.\n * There are many systems, devices, and other technologies that need to\n * communicate for a company to run smoothly. We believe that the answer to\n * these needs is a data dispatcher which lets all independent systems know\n * about data changes.\n */\nexport default class ClarityTransactionDispatcher {\n    /**\n     * Create a Dispatcher.\n     * @constructor\n     */\n    constructor(mongoDb) {\n        this.mongoDb = mongoDb;\n        this.ObjectID = mongoDb.getObjectID();\n        this.systems = [];\n        this.services = {};\n    }\n\n    /**\n     * Add an item to a collection into mongodb.\n     * @private\n     * @param {string} collectionName - The mongodb collection name.\n     * @param {object} item - The item to be added.\n     */\n    _addItemToCollectionAsync(collectionName, item) {\n        item.modifiedDate = new Date();\n        item.createdDate = new Date();\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.insertOne(item);\n        }).then((result) => {\n            item._id = result.insertedId;\n            return item;\n        });\n    }\n\n    _clone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n\n    /**\n     * Find one in a collection.\n     * @private\n     */\n    _findOneAsync(collectionName, filter) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.findOne(filter);\n        });\n    }\n\n    /**\n    * Find many in a collection.\n    * @private\n    */\n    _findAsync(collectionName, filter, sort, pageSize) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.find(filter).limit(parseInt(pageSize, 10)).sort(sort).toArray();\n        });\n    }\n\n    /**\n     * Get count in a collection.\n     * @private\n     */\n    _getCountAsync(collectionName) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.count();\n        });\n    }\n\n    /**\n     * Get a mongodb.\n     * @private\n     * @returns {Promise<mongodb>}\n     */\n    _getDatabaseAsync() {\n        return this.mongoDb.getDatabaseAsync(DATABASE_URL);\n    }\n\n    /**\n     * Initialize a system.\n     * @private\n     */\n    _initializingSystemAsync(system) {\n        let systemGuid = system.getGuid();\n        let filter = {\n            systemGuid\n        };\n        return this._findOneAsync(SYSTEM_DATA_COLLECTION, filter).then((systemData) => {\n            if (systemData == null) {\n                let newSystemData = {\n                    systemGuid,\n                    isInitialized: false\n                };\n                return this._addItemToCollectionAsync(SYSTEM_DATA_COLLECTION, newSystemData);\n            }\n            else {\n                return systemData;\n            }\n        }).then((systemData) => {\n            if (!systemData.isInitialized) {\n                return this._invokeMethodAsync(system, \"initializeAsync\", [this]).then(() => {\n                    systemData.isInitialized = true;\n                    return this._updateItemInCollectionAsync(SYSTEM_DATA_COLLECTION, systemData);\n                });\n            }\n        }).catch((error) => {\n            this.logErrorAsync({ message: error.message });\n            throw error;\n        });\n    }\n\n    /**\n     * Invoke a method on any object and make sure a promise is the returned value.\n     * @private\n     */\n    _invokeMethodAsync(obj, methodName, args) {\n        var returnValue;\n        if (typeof obj[methodName] === \"function\") {\n            returnValue = obj[methodName].apply(obj, args);\n            if (!(returnValue instanceof Promise)) {\n                returnValue = Promise.resolve(returnValue);\n            }\n        }\n        else {\n            returnValue = resolvedPromise;\n        }\n        return returnValue;\n    }\n\n    /**\n     * Notify the systems of a life cycle by its method name.\n     * @private\n     * @returns {Promise<undefined>}\n     */\n    _notifySystemsAsync(methodName, args) {\n        return this.systems.reduce((promise, system) => {\n            return promise.then(() => {\n                try {\n                    return this._invokeMethodAsync(system, methodName, args);\n                }\n                catch (error) {\n                    if (methodName !== \"logErrorAsync\") {\n                        this.logErrorAsync(error);\n                    }\n                    throw error;\n                }\n            });\n        }, resolvedPromise);\n    }\n\n    /**\n       * Notify the systems of a life cycle by its method name and recover if\n       * any of the systems reject the promise.\n       *\n       * This will be used for most life-cycle calls. The other systems need to respond\n       * regardless of other systems failing.\n       * @private\n       * @returns {Promise<undefined>}\n       */\n    _notifySystemsWithRecoveryAsync(methodName, args) {\n        return this.systems.reduce((promise, system) => {\n            return promise.then(() => {\n                try {\n                    return this._invokeMethodAsync(system, methodName, args);\n                }\n                catch (error) {\n                    this.logErrorAsync(error);\n                    throw error;\n                }\n            }).catch(() => {\n                return resolvedPromise;\n            });\n        }, resolvedPromise);\n    }\n    /**\n     * Remove an item from a collection.\n     * @private\n     * @returns {Promise<undefined>}\n     */\n    _removeItemfromCollection(collectionName, item) {\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.deleteOne({\n                _id: this.ObjectID(item._id)\n            });\n        });\n    }\n\n    /**\n     * Update an item in a collection.\n     * @private\n     * @returns {Promise<undefined>}\n     */\n    _updateItemInCollectionAsync(collectionName, item) {\n        item.modifiedDate = new Date();\n        return this._getDatabaseAsync().then((db) => {\n            return db.collection(collectionName);\n        }).then((collection) => {\n            return collection.update({\n                _id: this.ObjectID(item._id)\n            }, item, null);\n        });\n    }\n\n    /**\n     * Add an Entity to the datastore. The steps the dispatcher takes when saving an\n     * entity are.\n     *\n     * - Validate the entity with all systems. All systems have to validate to pass.\n     * - Save the entity to the datastore.\n     * - Notify the systems that an entity has been added.\n     * @param {IEntity} entity - The entity that you want to save to the datastore.\n     * @return {Promise<Entity>}\n     */\n    addEntityAsync(entity) {\n        let newEntity = {\n            _id: entity._id ? this.ObjectID(entity._id) : this.ObjectID(),\n            components: Array.isArray(entity.components) ? entity.components : []\n        };\n\n        newEntity.components.forEach(component => {\n            if (!component._id) {\n                component._id = this.ObjectID();\n            }\n            else {\n                component._id = this.ObjectID(component._id);\n            }\n        });\n\n        return this._notifySystemsWithRecoveryAsync(\"prepareEntityToBeAddedAsync\", [newEntity]).then(() => {\n            return this.validateEntityToBeAddedAsync(newEntity);\n        }).then(() => {\n            return this._addItemToCollectionAsync(ENTITIES_COLLECTION, newEntity);\n        }).then(entity => {\n            return this._notifySystemsWithRecoveryAsync(\"entityAddedAsync\", [entity]).then(() => {\n                return entity;\n            });\n        }).catch(error => {\n            this.logErrorAsync(error);\n            throw error;\n        });\n    }\n\n    /**\n     * Add a service for systems to use. Services could be HTTP services,\n     * or governance that needs to be shared acrossed systems.\n     * @param {string} name - The name by which the systems will request the service.\n     * @param {object} service - The service.\n     * @return {Promise<undefined>}\n     */\n    addServiceAsync(name, service) {\n        this.services[name] = service;\n        return resolvedPromise;\n    }\n\n    /**\n     * Add a system to the dispatcher. The systems are really where the work\n     * is done. They listen to the life-cycle of the entity and react based\n     * on the composition of components.\n     * The dispatcher does the following when adding a system.\n     *\n     * - Adds the system.\n     * - Invokes initializeAsync if the system hasn't been initialized before.\n     * - Invokes activatedAsync after initializeAsync is finished.\n     *\n     * #### Required System Methods\n     * - getGuid()\n     * - getName()\n     *\n     * #### Optional System Methods\n     *  - activatedAsync(clarityTransactionDispatcher: ClarityTransactionDispatcher)\n     *  - approveEntityToBeRemovedAsync(entity: IEntity)\n     *  - deactivatedAsync()\n     *  - disposedAsync()\n     *  - entityAddedAsync(entity: IEntity)\n     *  - entityRemovedAsync(entity: IEntity)\n     *  - entityRetrievedAsync(entity: IEntity)\n     *  - entityUpdatedAsync(oldEntity: IEntity, updatedEntity: IEntity)\n     *  - initializeAsync(clarityTransactionDispatcher: ClarityTransactionDispatcher)\n     *  - logErrorAsync(error: { type?: string; message?: string; })\n     *  - logMessageAsync(message: { type?: string; message?: string; })\n     *  - logWarningAsync(warning: { type?: string; message?: string; })\n     *  - prepareEntityToBeUpdatedAsync(oldEntity, entity)\n     *  - prepareEntityToAddedAsync(entity)\n     *  - serviceRemovedAsync(name: string)\n     *  - validateEntityAsync(entity: IEntity)\n     * @param {ISystem} system - The system to add.\n     * @return {Promise} - An undefined Promise.\n     */\n    addSystemAsync(system) {\n        if (!this.validateSystem(system)) {\n            return Promise.reject(new Error(\"Invalid system: Systems need to have a getName and a getGuid method on them.\"));\n        }\n        else {\n            this.systems.push(system);\n            return this._initializingSystemAsync(system).then(() => {\n                this.logMessageAsync({\n                    type: NOTICE,\n                    message: `System \"${system.getName()}\" was initialized.`\n                });\n                return this._invokeMethodAsync(system, \"activatedAsync\", [this]);\n            }).then(() => {\n                this.logMessageAsync({\n                    type: NOTICE,\n                    message: `System \"${system.getName()}\" was activated.`\n                });\n            }).catch(error => {\n                this.logErrorAsync(error);\n                throw error;\n            });\n        }\n    }\n\n    /**\n   * Approves whether an entity can be removed. Systems can deny the ability to remove entities.\n   * @param entity {object} - The entity to be removed.\n   */\n    approveEntityToBeRemovedAsync(entity) {\n        return this._notifySystemsAsync(\"approveEntityToBeRemovedAsync\", [entity]);\n    }\n\n    /**\n     * Deactivates a system and removes it from the systems being notified. To activate again use addSystemAsync.\n     * Think of this like a pause. The dispatcher calls deactivatedAsync on the system being removed.\n     * @param {ISystem} system - The system to be deactivate.\n     * @returns {Promise<undefined>} - Resolves when the system is deactivated.\n     */\n    deactivateSystemAsync(system) {\n        let deactivatedPromise;\n        let index = this.systems.indexOf(system);\n        if (index === -1) {\n            return Promise.reject(new Error(\"Couldn't find system to be deactivated.\"));\n        }\n        else {\n            this.systems.splice(index, 1);\n            try {\n                return deactivatedPromise = this._invokeMethodAsync(system, \"deactivatedAsync\", []).then(() => {\n                    this.logMessageAsync({\n                        type: NOTICE,\n                        message: `System \"${system.getName()}\" was deactivated.`\n                    });\n                }).catch(() => {\n                    return resolvedPromise;\n                });\n            }\n            catch (error) {\n                return resolvedPromise;\n            }\n        }\n    }\n\n    /**\n     * Disposes a system and removes it from the systems being notified. Use when removing systems for\n     * good. This allows the system to clean up after itself if needed. The dispatcher calls disposeAsync on the system being removed.\n     * @param {ISystem} system - The system to be disposed.\n     * @returns {Promise<undefined>} - Resolves when the system is disposed.\n     */\n    disposeSystemAsync(system) {\n        var disposedPromise;\n        var index = this.systems.indexOf(system);\n        if (index === -1) {\n            return Promise.reject(new Error(\"Couldn't find system to be disposed.\"));\n        }\n        else {\n            this.systems.splice(index, 1);\n            try {\n                return disposedPromise = this._invokeMethodAsync(system, \"disposedAsync\", []).then(() => {\n                    this.logMessageAsync({\n                        type: NOTICE,\n                        message: `System \"${system.getName()}\" was disposed.`\n                    });\n                }).catch(() => {\n                    return resolvedPromise;\n                });\n            }\n            catch (error) {\n                return resolvedPromise;\n            }\n        }\n    }\n\n    /**\n     * This allows you to define a query for entities, and then manages the iteration over the entities.\n     */\n    getQuery() {\n        return new Query({\n            mongoDb: this.mongoDb,\n            collectionName: ENTITIES_COLLECTION,\n            databaseName: DATABASE_URL\n        });\n    }\n\n    /**\n     * Page through entities using the lastId from a previous query. Use null or undefined to begin at the beginning.\n     * @param config {} - The configuration of the query. It takes a lastId, pageSize, lastModifiedDate, and a lastCreatedDate.\n     */\n    getEntitiesAsync(config = {}) {\n        let lastId = config.lastId ? this.ObjectID(config.lastId) : null;\n        let pageSize = config.pageSize < 50 ? config.pageSize : 50;\n        let lastModifiedDate = config.lastModifiedDate;\n        let lastCreatedDate = config.lastCreatedDate;\n        let sort = [[\"_id\", 1]];\n        let filter = {};\n        if (lastId != null) {\n            filter._id = {\n                $gt: lastId\n            };\n        }\n        if (lastCreatedDate != null) {\n            filter.createdDate = {\n                $gt: lastCreatedDate\n            };\n            sort.push([\"createdDate\", 1]);\n        }\n        if (lastModifiedDate != null) {\n            filter.modifiedDate = {\n                $gt: lastModifiedDate\n            };\n            sort.push([\"modifiedDate\", 1]);\n        }\n        return this._findAsync(ENTITIES_COLLECTION, filter, sort, pageSize).then(entities => {\n            let notifySystemsPromises = entities.map(entity => {\n                return this._notifySystemsWithRecoveryAsync(\"entityRetrievedAsync\", [entity]);\n            });\n            return Promise.all(notifySystemsPromises).then(() => {\n                return entities;\n            });\n        }).catch(error => {\n            this.logErrorAsync(error);\n            throw error;\n        });\n    }\n\n    /**\n     * Get an entity by its id.\n     * @param {string} entityId - The id of the desired entity.\n     * @return {Promise<Entity>} - A Promise resolved with the entity or null.\n     */\n    getEntityByIdAsync(entityId) {\n        return this._findOneAsync(ENTITIES_COLLECTION, {\n            _id: this.ObjectID(entityId)\n        }).then(entity => {\n            return this._notifySystemsWithRecoveryAsync(\"entityRetrievedAsync\", [entity]).then(() => {\n                return entity;\n            });\n        }).catch((error) => {\n            this.logErrorAsync(error);\n            throw error;\n        });\n    }\n\n    /**\n     * Get count for all entities in collection.\n     */\n    getEntityCountAsync() {\n        return this._getCountAsync(ENTITIES_COLLECTION);\n    }\n    /**\n     * Get a service by the name given.\n     * @param {string} name - The name of the desired service.\n     * @returns {object} - Null or the desired service.\n     */\n    getService(name) {\n        return this.services[name] || null;\n    }\n    /**\n     * Get all systems.\n     * @returns {Array<ISystems>}\n     */\n    getSystems() {\n        return this.systems;\n    }\n    /**\n     * Notifies the systems about an error.\n     * @param error {object} - The error to be sent to the systems.\n     * @returns {undefined}\n     */\n    logErrorAsync(error) {\n        this._notifySystemsAsync(\"logErrorAsync\", [error]);\n    }\n    /**\n     * Notifies the systems about a message.\n     * @param message {object} - The message to be sent to the systems.\n     * @returns {undefined}\n     */\n    logMessageAsync(message) {\n        this._notifySystemsAsync(\"logMessageAsync\", [message]);\n    }\n    /**\n     * Notifies the systems about a warning.\n     * @param warning {object} - The warning to be sent to the systems.\n     * @returns {undefined}\n     */\n    logWarningAsync(warning) {\n        this._notifySystemsAsync(\"logWarningAsync\", [warning]);\n    }\n    /**\n     * Removes the entity to be removed and notifies the systems the entity has been removed.\n     * @param {IEntity} entity - The entity to be removed.\n     * @returns {Promise<undefined>}\n     */\n    removeEntityAsync(entity) {\n        return this.approveEntityToBeRemovedAsync(entity).then(() => {\n            return this._removeItemfromCollection(ENTITIES_COLLECTION, entity);\n        }).then(() => {\n            return this._notifySystemsWithRecoveryAsync(\"entityRemovedAsync\", [entity]);\n        }).then(() => {\n            return entity;\n        }).catch(error => {\n            this.logErrorAsync(error);\n            throw error;\n        });\n    }\n    /**\n     * Removes a service by its name. The dispatcher will notify the systems that this service is being\n     * removed.\n     * @param {string} name - The name of the service to be removed.\n     * @returns {undefined}\n     */\n    removeServiceAsync(name) {\n        if (this.services[name]) {\n            delete this.services[name];\n            return this._notifySystemsWithRecoveryAsync(\"serviceRemovedAsync\", [name]);\n        }\n        else {\n            var error = Error(\"Couldn't find service to be removed.\");\n            this.logErrorAsync(error);\n            return Promise.reject(error);\n        }\n    }\n\n    startAsync() {\n        return this.mongoDb.startAsync();\n    }\n\n    stopAsync() {\n        return this._notifySystemsWithRecoveryAsync(\"deactivatedAsync\", []).then(() => {\n            return this.mongoDb.stopAsync();\n        });\n    }\n\n    /**\n     * Update an entity. The dispatcher will perform the following actions when updating.\n     *\n     * - Validate the entity. All interested systems need to validate to pass.\n     * - Entity's updates are saved.\n     * - The systems are notified about the update.\n     * @param {object} entity - The updated entity.\n     * @returns {Promise<undefined>} - Resolves when the entity is saved.\n     */\n    updateEntityAsync(entity) {\n        let oldEntity = null;\n        let updatedEntity = {\n            _id: entity._id ? this.ObjectID(entity._id) : this.ObjectID,\n            components: Array.isArray(entity.components) ? entity.components : []\n        };\n\n        updatedEntity.components.forEach(component => {\n            if (!component._id) {\n                component._id = this.ObjectID();\n            }\n            else {\n                component._id = this.ObjectID(component._id);\n            }\n        });\n\n        return this._findOneAsync(ENTITIES_COLLECTION, {\n            _id: updatedEntity._id\n        }).then((entity) => {\n            oldEntity = entity;\n            updatedEntity._id = oldEntity._id;\n            updatedEntity.createdDate = oldEntity.createdDate;\n\n            return this._notifySystemsWithRecoveryAsync(\"prepareEntityToBeUpdatedAsync\", [oldEntity, updatedEntity]);\n        }).then(() => {\n            return this.validateEntityToBeUpdatedAsync(oldEntity, updatedEntity);\n        }).then(() => {\n            return this._updateItemInCollectionAsync(ENTITIES_COLLECTION, updatedEntity);\n        }).then(() => {\n            return this._notifySystemsWithRecoveryAsync(\"entityUpdatedAsync\", [oldEntity, updatedEntity]);\n        }).then(() => {\n            return updatedEntity;\n        }).catch((error) => {\n            this.logErrorAsync(error);\n            throw error;\n        });\n    }\n\n    /**\n     * This allows systems to validate the entity being saved.\n     */\n    validateEntityToBeAddedAsync(entity) {\n        return this._notifySystemsAsync(\"validateEntityToBeAddedAsync\", [entity]);\n    }\n\n    /**\n     * This allows systems to validate the entity being saved.\n     */\n    validateEntityToBeUpdatedAsync(oldEntity, entity) {\n        return this._notifySystemsAsync(\"validateEntityToBeUpdatedAsync\", [oldEntity, entity]);\n    }\n\n\n    /**\n     * Ensures the system has the required methods.\n     * @param {ISystem} system - The System to be validated.\n     */\n    validateSystem(system) {\n        if (typeof system.getGuid !== \"function\" ||\n            typeof system.getName !== \"function\") {\n            return false;\n        }\n        return true;\n    }\n}"]}