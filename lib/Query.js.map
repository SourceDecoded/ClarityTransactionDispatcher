{"version":3,"sources":["../src/Query.js"],"names":["Query","mongoDb","collectionName","filter","sort","_id","batchSize","limit","lastId","isLocked","currentRetrievedCount","Error","callback","nextAsync","then","results","Promise","resolve","forEach","forEachAsync","_assertLock","Object","assign","$gt","getDatabaseAsync","database","collection","find","toArray","length","remainingCount","slice"],"mappings":";;;;;;;;;;IAAqBA,K;AAEjB,mBAAYC,OAAZ,EAAqBC,cAArB,EAAqC;AAAA;;AACjC,aAAKD,OAAL,GAAeA,OAAf;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,MAAL,GAAc,EAAd;AACA,aAAKC,IAAL,GAAY,EAACC,KAAK,CAAN,EAAZ;AACA,aAAKC,SAAL,GAAiB,EAAjB;AACA,aAAKC,KAAL,GAAa,EAAb;AACA,aAAKC,MAAL,GAAc,IAAd;AACA,aAAKC,QAAL,GAAgB,KAAhB;AACA,aAAKC,qBAAL,GAA6B,CAA7B;AACH;;;;sCAEa;AACV,gBAAI,KAAKD,QAAT,EAAmB;AACf,sBAAM,IAAIE,KAAJ,CAAU,oDAAV,CAAN;AACH;AACJ;;;qCAEYC,Q,EAAU;AAAA;;AACnB,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,sBAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,mBAAO,KAAKE,SAAL,GAAiBC,IAAjB,CAAsB,UAACC,OAAD,EAAa;AACtC,oBAAIA,WAAW,IAAf,EAAqB;AACjB,2BAAOC,QAAQC,OAAR,EAAP;AACH,iBAFD,MAEO;AACHF,4BAAQG,OAAR,CAAgBN,QAAhB;AACA,2BAAO,MAAKO,YAAL,CAAkBP,QAAlB,CAAP;AACH;AACJ,aAPM,CAAP;AAQH;;;6BAEIT,M,EAAQ;AACT,iBAAKiB,WAAL;AACA,iBAAKjB,MAAL,GAAckB,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,MAAvB,EAA+BA,MAA/B,CAAd;AACH;;;6BAEIC,K,EAAM;AACP,iBAAKgB,WAAL;AACA,iBAAKhB,IAAL,GAAYiB,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKlB,IAAvB,EAA6BA,KAA7B,CAAZ;AACH;;;8BAEKG,M,EAAO;AACT,iBAAKa,WAAL;AACA,iBAAKb,KAAL,GAAaA,MAAb;AACH;;;oCAEW;AAAA;;AACR,iBAAKE,QAAL,GAAgB,IAAhB;;AAEA,gBAAIN,SAAS,EAAb;;AAEA,gBAAI,KAAKK,MAAL,IAAe,IAAnB,EAAyB;AACrBL,yBAAS;AACLE,yBAAK,EAAEkB,KAAK,KAAKf,MAAZ;AADA,iBAAT;AAGH;;AAED,gBAAIL,SAASkB,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,MAAvB,EAA+BA,MAA/B,CAAb;;AAEA,mBAAOF,QAAQuB,gBAAR,GAA2BV,IAA3B,CAAgC,UAACW,QAAD,EAAc;AACjD,uBAAOA,SAASC,UAAT,CAAoB,OAAKxB,cAAzB,EAAyCyB,IAAzC,CAA8CxB,MAA9C,EAAsDC,IAAtD,CAA2D,OAAKA,IAAhE,EAAsEG,KAAtE,CAA4E,OAAKD,SAAjF,EAA4FsB,OAA5F,EAAP;AACH,aAFM,EAEJd,IAFI,CAEC,UAACC,OAAD,EAAa;;AAEjB,oBAAIA,QAAQc,MAAR,GAAiB,OAAKnB,qBAAtB,GAA8C,OAAKH,KAAvD,EAA8D;AAC1D,wBAAIuB,iBAAiBf,QAAQc,MAAR,GAAiB,OAAKnB,qBAA3C;AACAK,8BAAUA,QAAQgB,KAAR,CAAcD,cAAd,CAAV;AACH;;AAED,uBAAKpB,qBAAL,IAA8BK,QAAQc,MAAtC;;AAEA,oBAAId,QAAQc,MAAR,KAAmB,CAAvB,EAA0B;AACtB,2BAAO,IAAP;AACH,iBAFD,MAEO;AACH,2BAAKrB,MAAL,GAAcO,QAAQA,QAAQc,MAAR,GAAiB,CAAzB,EAA4BxB,GAA1C;AACA,2BAAOU,OAAP;AACH;AAEJ,aAlBM,CAAP;AAmBH;;;kCAES;AACN,iBAAKP,MAAL,GAAc,IAAd;AACA,iBAAKC,QAAL,GAAgB,KAAhB;AACA,iBAAKC,qBAAL,GAA6B,CAA7B;AACH;;;;;;kBAxFgBV,K","file":"Query.js","sourcesContent":["export default class Query {\n\n    constructor(mongoDb, collectionName) {\n        this.mongoDb = mongoDb;\n        this.collectionName = collectionName;\n        this.filter = {};\n        this.sort = {_id: 1};\n        this.batchSize = 50;\n        this.limit = 50;\n        this.lastId = null;\n        this.isLocked = false;\n        this.currentRetrievedCount = 0;\n    }\n\n    _assertLock() {\n        if (this.isLocked) {\n            throw new Error(\"The query cannot configured after the first batch.\");\n        }\n    }\n\n    forEachAsync(callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"The callback argument needs to be a function.\");\n        }\n\n        return this.nextAsync().then((results) => {\n            if (results == null) {\n                return Promise.resolve();\n            } else {\n                results.forEach(callback);\n                return this.forEachAsync(callback);\n            }\n        });\n    }\n\n    find(filter) {\n        this._assertLock();\n        this.filter = Object.assign({}, this.filter, filter);\n    }\n\n    sort(sort) {\n        this._assertLock();\n        this.sort = Object.assign({}, this.sort, sort);\n    }\n\n    limit(limit) {\n        this._assertLock();\n        this.limit = limit;\n    }\n\n    nextAsync() {\n        this.isLocked = true;\n\n        var filter = {};\n\n        if (this.lastId != null) {\n            filter = {\n                _id: { $gt: this.lastId }\n            }\n        }\n\n        var filter = Object.assign({}, this.filter, filter);\n\n        return mongoDb.getDatabaseAsync().then((database) => {\n            return database.collection(this.collectionName).find(filter).sort(this.sort).limit(this.batchSize).toArray();\n        }).then((results) => {\n\n            if (results.length + this.currentRetrievedCount > this.limit) {\n                let remainingCount = results.length - this.currentRetrievedCount;\n                results = results.slice(remainingCount);\n            }\n\n            this.currentRetrievedCount += results.length;\n\n            if (results.length === 0) {\n                return null;\n            } else {\n                this.lastId = results[results.length - 1]._id;\n                return results;\n            }\n\n        });\n    }\n\n    restart() {\n        this.lastId = null;\n        this.isLocked = false;\n        this.currentRetrievedCount = 0;\n    }\n\n}"]}