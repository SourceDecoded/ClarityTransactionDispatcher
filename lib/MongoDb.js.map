{"version":3,"sources":["../src/MongoDb.js"],"names":["MongoClient","ObjectID","resolvedPromise","Promise","resolve","dbpath","test","process","platform","defaultMongodbConfig","ip","args","mongoProcesses","MongoProcess","mongoHelper","initializingPromise","isInitialized","connections","run","then","mongoBin","childProcess","kill","error","MongoDb","config","Object","assign","_getArgValue","name","dbpathIndex","indexOf","customDbPath","port","_getPort","key","startAsync","stopAsync","databaseName","Error","databaseUrl","connect","getDatabaseAsync","db"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,cAAc,kBAAQA,WAA5B;AACA,IAAMC,WAAW,kBAAQA,QAAzB;AACA,IAAMC,kBAAkBC,QAAQC,OAAR,EAAxB;AACA,IAAMC,SAAS,OAAOC,IAAP,CAAYC,QAAQC,QAApB,IAAgC,YAAhC,GAA+C,WAA9D;AACA,IAAMC,uBAAuB;AACzBC,QAAI,WADqB;AAEzBC,UAAM,CAAC,QAAD,EAAW,OAAX,EAAoB,UAApB,EAAgCN,MAAhC;AAFmB,CAA7B;;AAKA,IAAMO,iBAAiB,EAAvB;;IAEMC,Y;AACF,0BAAYF,IAAZ,EAAkB;AAAA;;AACd,aAAKA,IAAL,GAAYA,IAAZ;AACA,aAAKG,WAAL,GAAmB,IAAnB;AACA,aAAKC,mBAAL,GAA2B,IAA3B;AACA,aAAKC,aAAL,GAAqB,KAArB;AACA,aAAKC,WAAL,GAAmB,CAAnB;AACH;;;;qCAEY;AAAA;;AAET,gBAAI,KAAKF,mBAAL,IAA4B,IAAhC,EAAsC;AAClC,qBAAKD,WAAL,GAAmB,kCAAiB,KAAKH,IAAtB,CAAnB;AACA,qBAAKI,mBAAL,GAA2B,KAAKD,WAAL,CAAiBI,GAAjB,EAA3B;AACH;;AAED,mBAAO,KAAKH,mBAAL,CAAyBI,IAAzB,CAA8B,YAAM;AACvC,sBAAKF,WAAL;AACA,sBAAKD,aAAL,GAAqB,IAArB;AACH,aAHM,CAAP;AAIH;;;oCAEW;AAAA;;AACR,gBAAI,KAAKD,mBAAL,IAA4B,IAAhC,EAAsC;AAClC,uBAAO,KAAKA,mBAAL,CAAyBI,IAAzB,CAA8B,YAAM;AACvC,2BAAKF,WAAL;AACA,wBAAI,OAAKA,WAAL,KAAqB,CAAzB,EAA4B;AACxB,4BAAI;AACA,mCAAKH,WAAL,CAAiBM,QAAjB,CAA0BC,YAA1B,CAAuCC,IAAvC;AACA,mCAAKR,WAAL,GAAmB,IAAnB;AACA,mCAAKC,mBAAL,GAA2B,IAA3B;AACA,mCAAKC,aAAL,GAAqB,KAArB;AACH,yBALD,CAKE,OAAOO,KAAP,EAAc,CACf;AACJ;AACJ,iBAXM,CAAP;AAYH,aAbD,MAaO;AACH,uBAAOrB,eAAP;AACH;AACJ;;;;;;IAIgBsB,O;AACjB,qBAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcC,OAAOC,MAAP,CAAc,EAAd,EAAkBlB,oBAAlB,EAAwCgB,MAAxC,CAAd;AACA,aAAKlB,OAAL,GAAe,IAAf;AACH;;;;qCAMY;AACT,mBAAO,KAAKqB,YAAL,CAAkB,UAAlB,CAAP;AACH;;;mCAEU;AACP,mBAAO,KAAKA,YAAL,CAAkB,QAAlB,CAAP;AACH;;;qCAEYC,I,EAAM;AACf,gBAAIC,cAAc,KAAKL,MAAL,CAAYd,IAAZ,CAAiBoB,OAAjB,CAAyBF,IAAzB,CAAlB;AACA,gBAAIG,eAAeF,cAAc,CAAC,CAAf,GAAmB,KAAKL,MAAL,CAAYd,IAAZ,CAAiBmB,cAAc,CAA/B,CAAnB,GAAuDzB,MAA1E;AACA,mBAAO2B,YAAP;AACH;;;qCAEY;AACT,gBAAIrB,OAAO,KAAKc,MAAL,CAAYd,IAAvB;AACA,gBAAIsB,OAAO,KAAKC,QAAL,EAAX;AACA,gBAAIxB,KAAK,KAAKe,MAAL,CAAYf,EAArB;AACA,gBAAIyB,MAASzB,EAAT,SAAeuB,IAAnB;;AAEA,gBAAI1B,UAAUK,eAAeuB,GAAf,CAAd;;AAEA,gBAAI5B,WAAW,IAAf,EAAqB;AACjBA,0BAAUK,eAAeuB,GAAf,IAAsB,IAAItB,YAAJ,CAAiBF,IAAjB,CAAhC;AACH;;AAED,iBAAKJ,OAAL,GAAeA,OAAf;;AAEA,mBAAOA,QAAQ6B,UAAR,EAAP;AACH;;;oCAEW;AACR,gBAAIzB,OAAO,KAAKc,MAAL,CAAYd,IAAvB;AACA,gBAAIsB,OAAO,KAAKC,QAAL,EAAX;AACA,gBAAIxB,KAAK,KAAKe,MAAL,CAAYf,EAArB;AACA,gBAAIyB,MAASzB,EAAT,SAAeuB,IAAnB;;AAEA,gBAAI1B,UAAUK,eAAeuB,GAAf,CAAd;;AAEA,gBAAI5B,WAAW,IAAf,EAAqB;AACjB,uBAAOL,eAAP;AACH;;AAED,mBAAOK,QAAQ8B,SAAR,EAAP;AACH;;;yCAEgBC,Y,EAAc;AAAA;;AAC3B,gBAAIA,gBAAgB,IAApB,EAA0B;AACtB,sBAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACH;;AAED,mBAAO,KAAKH,UAAL,GAAkBjB,IAAlB,CAAuB,YAAM;AAChC,oBAAIM,SAAS,OAAKA,MAAlB;AACA,oBAAIe,6BAA2Bf,OAAOf,EAAlC,SAAwC,OAAKwB,QAAL,EAAxC,SAA2DI,YAA/D;;AAEA,uBAAOtC,YAAYyC,OAAZ,CAAoBD,WAApB,CAAP;AACH,aALM,CAAP;AAMH;;;uCAEcF,Y,EAAc;AAAA;;AACzB,iBAAKF,UAAL,GAAkBjB,IAAlB,CAAuB,YAAM;AACzB,uBAAO,OAAKuB,gBAAL,CAAsBJ,YAAtB,CAAP;AACH,aAFD,EAEGnB,IAFH,CAEQ,UAACwB,EAAD,EAAQ;AACZ,uBAAO,2BAAWA,EAAX,oBAAP;AACH,aAJD;AAKH;;;sCAEa;AACV,mBAAO1C,QAAP;AACH;;;4BAzEmB;AAChB,mBAAO,KAAKM,OAAL,CAAaS,aAApB;AACH;;;;;;kBARgBQ,O","file":"MongoDb.js","sourcesContent":["import { MongodHelper } from \"mongodb-prebuilt\";\nimport mongodb from \"mongodb\";\nimport GridFs from \"gridfs-stream\";\nimport fs from \"fs-extra\"\n\nconst MongoClient = mongodb.MongoClient;\nconst ObjectID = mongodb.ObjectID;\nconst resolvedPromise = Promise.resolve();\nconst dbpath = /^win/.test(process.platform) ? \"c:/data/db\" : \"~/data/db\";\nconst defaultMongodbConfig = {\n    ip: \"127.0.0.1\",\n    args: [\"--port\", \"27017\", \"--dbpath\", dbpath]\n};\n\nconst mongoProcesses = {};\n\nclass MongoProcess {\n    constructor(args) {\n        this.args = args;\n        this.mongoHelper = null;\n        this.initializingPromise = null;\n        this.isInitialized = false;\n        this.connections = 0;\n    }\n\n    startAsync() {\n\n        if (this.initializingPromise == null) {\n            this.mongoHelper = new MongodHelper(this.args);\n            this.initializingPromise = this.mongoHelper.run();\n        }\n\n        return this.initializingPromise.then(() => {\n            this.connections++;\n            this.isInitialized = true;\n        });\n    }\n\n    stopAsync() {\n        if (this.initializingPromise != null) {\n            return this.initializingPromise.then(() => {\n                this.connections--;\n                if (this.connections === 0) {\n                    try {\n                        this.mongoHelper.mongoBin.childProcess.kill();\n                        this.mongoHelper = null;\n                        this.initializingPromise = null;\n                        this.isInitialized = false;\n                    } catch (error) {\n                    }\n                }\n            });\n        } else {\n            return resolvedPromise;\n        }\n    }\n\n}\n\nexport default class MongoDb {\n    constructor(config) {\n        this.config = Object.assign({}, defaultMongodbConfig, config);\n        this.process = null;\n    }\n\n    get isInitialized() {\n        return this.process.isInitialized;\n    }\n\n    _getDbPath() {\n        return this._getArgValue(\"--dbpath\");\n    }\n\n    _getPort() {\n        return this._getArgValue(\"--port\");\n    }\n\n    _getArgValue(name) {\n        var dbpathIndex = this.config.args.indexOf(name);\n        var customDbPath = dbpathIndex > -1 ? this.config.args[dbpathIndex + 1] : dbpath;\n        return customDbPath;\n    }\n\n    startAsync() {\n        var args = this.config.args;\n        var port = this._getPort();\n        var ip = this.config.ip;\n        var key = `${ip}|${port}`;\n\n        var process = mongoProcesses[key];\n\n        if (process == null) {\n            process = mongoProcesses[key] = new MongoProcess(args);\n        }\n\n        this.process = process;\n\n        return process.startAsync();\n    }\n\n    stopAsync() {\n        var args = this.config.args;\n        var port = this._getPort();\n        var ip = this.config.ip;\n        var key = `${ip}|${port}`;\n\n        var process = mongoProcesses[key];\n\n        if (process == null) {\n            return resolvedPromise;\n        }\n\n        return process.stopAsync();\n    }\n\n    getDatabaseAsync(databaseName) {\n        if (databaseName == null) {\n            throw new Error(\"Null Argrument Exception: databaseName needs to be supplied.\");\n        }\n\n        return this.startAsync().then(() => {\n            var config = this.config;\n            var databaseUrl = `mongodb://${config.ip}:${this._getPort()}/${databaseName}`;\n\n            return MongoClient.connect(databaseUrl);\n        });\n    }\n\n    getGridFsAsync(databaseName) {\n        this.startAsync().then(() => {\n            return this.getDatabaseAsync(databaseName);\n        }).then((db) => {\n            return new GridFs(db, mongodb);\n        });\n    }\n\n    getObjectID() {\n        return ObjectID;\n    }\n\n\n}"]}