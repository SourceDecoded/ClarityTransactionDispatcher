{"version":3,"sources":["../src/MongoDb.js"],"names":["MongoClient","ObjectID","resolvedPromise","Promise","resolve","defaultMongodbConfig","databaseName","ip","port","isInMemory","MongoDb","config","Object","assign","initializingPromise","isInitialized","mongoHelper","run","then","catch","error","getDatabaseAsync","db","promise","reject","dropDatabase","result","mongoBin","childProcess","kill","startAsync","databaseUrl","connect"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,cAAc,kBAAQA,WAA5B;AACA,IAAMC,WAAW,kBAAQA,QAAzB;AACA,IAAMC,kBAAkBC,QAAQC,OAAR,EAAxB;AACA,IAAMC,uBAAuB;AACzBC,kBAAc,gCADW;AAEzBC,QAAI,WAFqB;AAGzBC,UAAM,OAHmB;AAIzBC,gBAAY;AAJa,CAA7B;;IAOqBC,O;AACjB,qBAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,oBAAlB,EAAwCM,MAAxC,CAAd;AACA,aAAKG,mBAAL,GAA2B,IAA3B;AACA,aAAKC,aAAL,GAAqB,KAArB;AACH;;;;qCAEY;AAAA;;AACT,gBAAI,KAAKD,mBAAL,IAA4B,IAAhC,EAAsC;AAClC,uBAAO,KAAKA,mBAAZ;AACH,aAFD,MAEO;AACH,qBAAKE,WAAL,GAAmB,kCAAiB,CAAC,QAAD,EAAW,KAAKL,MAAL,CAAYH,IAAvB,CAAjB,CAAnB;;AAEA,uBAAO,KAAKM,mBAAL,GAA2B,KAAKE,WAAL,CAAiBC,GAAjB,GAAuBC,IAAvB,CAA4B,YAAM;AAChE,0BAAKH,aAAL,GAAqB,IAArB;AACH,iBAFiC,EAE/BI,KAF+B,CAEzB,UAACC,KAAD,EAAW,CAEnB,CAJiC,CAAlC;AAKH;AACJ;;;oCAEW;AAAA;;AACR,gBAAIN,sBAAsB,KAAKA,mBAA/B;;AAEA,gBAAI,KAAKA,mBAAL,IAA4B,IAAhC,EAAsC;AAClCA,sCAAsBZ,eAAtB;AACH;;AAED,mBAAOY,oBAAoBI,IAApB,CAAyB,YAAM;AAClC,uBAAO,OAAKG,gBAAL,EAAP;AACH,aAFM,EAEJH,IAFI,CAEC,UAACI,EAAD,EAAQ;AACZ,oBAAIC,UAAUrB,eAAd;;AAEA,oBAAI,OAAKS,MAAL,CAAYF,UAAhB,EAA4B;AACxBc,8BAAU,IAAIpB,OAAJ,CAAY,UAACC,OAAD,EAAUoB,MAAV,EAAqB;AACvCF,2BAAGG,YAAH,CAAgB,UAACL,KAAD,EAAQM,MAAR,EAAmB;AAC/B,gCAAIN,SAAS,IAAb,EAAmB;AACfI,uCAAOJ,KAAP;AACH,6BAFD,MAEO;AACHhB,wCAAQsB,MAAR;AACH;AACJ,yBAND;AAOH,qBARS,CAAV;AASH;;AAED,uBAAOH,OAAP;AACH,aAlBM,EAkBJL,IAlBI,CAkBC,YAAM;AACV,uBAAKF,WAAL,CAAiBW,QAAjB,CAA0BC,YAA1B,CAAuCC,IAAvC;AACH,aApBM,CAAP;AAqBH;;;2CAEkB;AAAA;;AACf,mBAAO,KAAKC,UAAL,GAAkBZ,IAAlB,CAAuB,YAAM;AAChC,oBAAIP,SAAS,OAAKA,MAAlB;AACA,oBAAIL,eAAeK,OAAOF,UAAP,GAAoBE,OAAOL,YAAP,GAAsB,YAA1C,GAAyDK,OAAOL,YAAnF;AACA,oBAAIyB,6BAA2BpB,OAAOJ,EAAlC,SAAwCI,OAAOH,IAA/C,SAAuDF,YAA3D;;AAEA,uBAAON,YAAYgC,OAAZ,CAAoBD,WAApB,CAAP;AACH,aANM,CAAP;AAOH;;;yCAEgB;AACb,mBAAO,KAAKV,gBAAL,GAAwBH,IAAxB,CAA6B,UAACI,EAAD,EAAQ;AACxC,uBAAO,2BAAWA,EAAX,oBAAP;AACH,aAFM,CAAP;AAGH;;;sCAEa;AACV,mBAAOrB,QAAP;AACH;;;;;;kBArEgBS,O","file":"MongoDb.js","sourcesContent":["import { MongodHelper } from \"mongodb-prebuilt\";\nimport mongodb from \"mongodb\";\nimport GridFs from \"gridfs-stream\";\n\nconst MongoClient = mongodb.MongoClient;\nconst ObjectID = mongodb.ObjectID;\nconst resolvedPromise = Promise.resolve();\nconst defaultMongodbConfig = {\n    databaseName: \"clarity_transaction_dispatcher\",\n    ip: \"127.0.0.1\",\n    port: \"27017\",\n    isInMemory: false\n};\n\nexport default class MongoDb {\n    constructor(config) {\n        this.config = Object.assign({}, defaultMongodbConfig, config);\n        this.initializingPromise = null;\n        this.isInitialized = false;\n    }\n\n    startAsync() {\n        if (this.initializingPromise != null) {\n            return this.initializingPromise;\n        } else {\n            this.mongoHelper = new MongodHelper([\"--port\", this.config.port]);\n\n            return this.initializingPromise = this.mongoHelper.run().then(() => {\n                this.isInitialized = true;\n            }).catch((error) => {\n\n            });\n        }\n    }\n\n    stopAsync() {\n        var initializingPromise = this.initializingPromise;\n\n        if (this.initializingPromise == null) {\n            initializingPromise = resolvedPromise;\n        }\n\n        return initializingPromise.then(() => {\n            return this.getDatabaseAsync();\n        }).then((db) => {\n            var promise = resolvedPromise;\n\n            if (this.config.isInMemory) {\n                promise = new Promise((resolve, reject) => {\n                    db.dropDatabase((error, result) => {\n                        if (error != null) {\n                            reject(error);\n                        } else {\n                            resolve(result);\n                        }\n                    });\n                });\n            }\n\n            return promise;\n        }).then(() => {\n            this.mongoHelper.mongoBin.childProcess.kill();\n        });\n    }\n\n    getDatabaseAsync() {\n        return this.startAsync().then(() => {\n            var config = this.config;\n            var databaseName = config.isInMemory ? config.databaseName + \"_in_memory\" : config.databaseName;\n            var databaseUrl = `mongodb://${config.ip}:${config.port}/${databaseName}`;\n\n            return MongoClient.connect(databaseUrl);\n        });\n    }\n\n    getGridFsAsync() {\n        return this.getDatabaseAsync().then((db) => {\n            return new GridFs(db, mongodb);\n        });\n    }\n\n    getObjectID() {\n        return ObjectID;\n    }\n\n\n}"]}