{"version":3,"sources":["../../../../src/systems/DispatcherApiSystem/app/Router.js"],"names":["Router","dispatcherApi","app","clarityTransactionDispatcher","getService","authenticator","fileSystem","authorizationHeader","parts","split","length","trim","request","response","token","decode","getToken","get","verified","message","statusCode","error","use","next","header","locals","authenticationResult","authenticate","status","send"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,M;AACjB,oBAAYC,aAAZ,EAA2B;AAAA;;AACvB,aAAKC,GAAL,GAAWD,cAAcE,4BAAd,CAA2CC,UAA3C,CAAsD,SAAtD,CAAX;AACA,aAAKC,aAAL,GAAqBJ,cAAcE,4BAAd,CAA2CC,UAA3C,CAAsD,eAAtD,CAArB;AACA,aAAKE,UAAL,GAAkBL,cAAcE,4BAAd,CAA2CC,UAA3C,CAAsD,YAAtD,CAAlB;AACA,aAAKD,4BAAL,GAAoCF,cAAcE,4BAAlD;AACA,aAAKF,aAAL,GAAqBA,aAArB;AACH;;;;iCAEQM,mB,EAAqB;AAC1B,gBAAIC,QAAQD,oBAAoBE,KAApB,CAA0B,GAA1B,CAAZ;AACA,mBAAOD,MAAMA,MAAME,MAAN,GAAe,CAArB,EAAwBC,IAAxB,EAAP;AACH;;;qCAEYC,O,EAASC,Q,EAAU;AAC5B,gBAAI,KAAKR,aAAL,IAAsB,IAA1B,EAAgC;AAC5B,oBAAI;AACA,wBAAIS,QAAQ,KAAKT,aAAL,CAAmBU,MAAnB,CAA0B,KAAKC,QAAL,CAAcJ,QAAQK,GAAR,CAAY,eAAZ,CAAd,CAA1B,CAAZ;;AAEA,2BAAO;AACHC,kCAAU,IADP;AAEHC,iCAAS,IAFN;AAGHC,oCAAY,IAHT;AAIHN,+BAAOA;AAJJ,qBAAP;AAMH,iBATD,CASE,OAAOO,KAAP,EAAc;AACZ,2BAAO;AACHH,kCAAU,KADP;AAEHC,iCAASE,MAAMF,OAFZ;AAGHL,+BAAO,IAHJ;AAIHM,oCAAY;AAJT,qBAAP;AAMH;AACJ;AACD,mBAAO;AACHF,0BAAU,IADP;AAEHC,yBAAS,IAFN;AAGHL,uBAAO,IAHJ;AAIHM,4BAAY;AAJT,aAAP;AAMH;;;+BAEM;AAAA;;AACH,iBAAKlB,GAAL,CAASoB,GAAT,CAAa,UAACV,OAAD,EAAUC,QAAV,EAAoBU,IAApB,EAA6B;AACtCV,yBAASW,MAAT,CAAgB,6BAAhB,EAA+C,GAA/C;AACAX,yBAASW,MAAT,CAAgB,8BAAhB,EAAgD,0BAAhD;AACAX,yBAASW,MAAT,CAAgB,8BAAhB,EAAgD,6BAAhD;AACAX,yBAASY,MAAT,CAAgBxB,aAAhB,GAAgC,MAAKA,aAArC;AACAY,yBAASY,MAAT,CAAgBpB,aAAhB,GAAgC,MAAKA,aAArC;AACAQ,yBAASY,MAAT,CAAgBnB,UAAhB,GAA6B,MAAKA,UAAlC;;AAEA,oBAAIoB,uBAAuB,MAAKC,YAAL,CAAkBf,OAAlB,EAA2BC,QAA3B,CAA3B;;AAEA,oBAAIa,qBAAqBR,QAAzB,EAAmC;AAC/BL,6BAASY,MAAT,CAAgBX,KAAhB,GAAwBY,qBAAqBZ,KAA7C;AACAS;AACH,iBAHD,MAGO;AACHV,6BAASe,MAAT,CAAgBF,qBAAqBN,UAArC,EAAiDS,IAAjD,CAAsD,EAAEV,SAASO,qBAAqBP,OAAhC,EAAtD;AACH;AACJ,aAhBD;;AAkBA,iBAAKjB,GAAL,CAASoB,GAAT,CAAa,eAAb;;AAEA,iBAAKpB,GAAL,CAASoB,GAAT,CAAa,UAACD,KAAD,EAAQT,OAAR,EAAiBC,QAAjB,EAA2BU,IAA3B,EAAoC;AAC7C,oBAAIF,KAAJ,EAAW;AACPR,6BAASe,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAAEV,SAASE,MAAMF,OAAjB,EAA1B;AACH,iBAFD,MAEO;AACHI;AACH;AACJ,aAND;AAOH;;;;;;kBAtEgBvB,M","file":"Router.js","sourcesContent":["import entitiesRoute from \"./routes/Entities\";\n\nexport default class Router {\n    constructor(dispatcherApi) {\n        this.app = dispatcherApi.clarityTransactionDispatcher.getService(\"express\");\n        this.authenticator = dispatcherApi.clarityTransactionDispatcher.getService(\"authenticator\");\n        this.fileSystem = dispatcherApi.clarityTransactionDispatcher.getService(\"fileSystem\");\n        this.clarityTransactionDispatcher = dispatcherApi.clarityTransactionDispatcher;\n        this.dispatcherApi = dispatcherApi;\n    }\n\n    getToken(authorizationHeader) {\n        var parts = authorizationHeader.split(\" \");\n        return parts[parts.length - 1].trim();\n    }\n\n    authenticate(request, response) {\n        if (this.authenticator != null) {\n            try {\n                var token = this.authenticator.decode(this.getToken(request.get(\"Authorization\")));\n\n                return {\n                    verified: true,\n                    message: null,\n                    statusCode: null,\n                    token: token\n                };\n            } catch (error) {\n                return {\n                    verified: false,\n                    message: error.message,\n                    token: null,\n                    statusCode: 401\n                };\n            }\n        }\n        return {\n            verified: true,\n            message: null,\n            token: null,\n            statusCode: null\n        };\n    }\n\n    init() {\n        this.app.use((request, response, next) => {\n            response.header(\"Access-Control-Allow-Origin\", \"*\");\n            response.header(\"Access-Control-Allow-Methods\", \"GET, PATCH, POST, DELETE\");\n            response.header(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\n            response.locals.dispatcherApi = this.dispatcherApi;\n            response.locals.authenticator = this.authenticator;\n            response.locals.fileSystem = this.fileSystem;\n\n            var authenticationResult = this.authenticate(request, response);\n\n            if (authenticationResult.verified) {\n                response.locals.token = authenticationResult.token;\n                next();\n            } else {\n                response.status(authenticationResult.statusCode).send({ message: authenticationResult.message });\n            }\n        });\n\n        this.app.use(\"/api/entities\", entitiesRoute);\n\n        this.app.use((error, request, response, next) => {\n            if (error) {\n                response.status(400).send({ message: error.message });\n            } else {\n                next();\n            }\n        });\n    }\n}"]}