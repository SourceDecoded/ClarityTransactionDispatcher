{"version":3,"sources":["../../../../../src/systems/DispatcherMonitorSystem/app/routes/Logs.js"],"names":["express","logRouter","Router","get","request","response","dispatcherMonitor","locals","lastId","query","pageSize","getLogsAsync","then","status","send","logs","catch","message","error","logId","params","id","getLogByIdAsync","log"],"mappings":";;;;;;AAAA;;IAAYA,O;;;;AAEZ,IAAMC,YAAYD,QAAQE,MAAR,EAAlB;;AAEAD,UAAUE,GAAV,CAAc,GAAd,EAAmB,UAACC,OAAD,EAAUC,QAAV,EAAuB;AACtC,QAAMC,oBAAoBD,SAASE,MAAT,CAAgBD,iBAA1C;AACA,QAAME,SAASJ,QAAQK,KAAR,CAAcD,MAAd,KAAyB,GAAzB,GAA+B,IAA/B,GAAsCJ,QAAQK,KAAR,CAAcD,MAAnE;AACA,QAAME,WAAWN,QAAQK,KAAR,CAAcC,QAA/B;;AAEAJ,sBAAkBK,YAAlB,CAA+B,EAAEH,cAAF,EAAUE,kBAAV,EAA/B,EAAqDE,IAArD,CAA0D,gBAAQ;AAC9DP,iBAASQ,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BC,IAA1B;AACH,KAFD,EAEGC,KAFH,CAES,iBAAS;AACdX,iBAASQ,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAAEG,SAASC,MAAMD,OAAjB,EAA1B;AACH,KAJD;AAKH,CAVD;;AAYAhB,UAAUE,GAAV,CAAc,MAAd,EAAsB,UAACC,OAAD,EAAUC,QAAV,EAAuB;AACzC,QAAMC,oBAAoBD,SAASE,MAAT,CAAgBD,iBAA1C;AACA,QAAMa,QAAQf,QAAQgB,MAAR,CAAeC,EAA7B;;AAEAf,sBAAkBgB,eAAlB,CAAkCH,KAAlC,EAAyCP,IAAzC,CAA8C,eAAO;AACjDP,iBAASQ,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BS,GAA1B;AACH,KAFD,EAEGP,KAFH,CAES,iBAAS;AACdX,iBAASQ,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAAEG,SAASC,MAAMD,OAAjB,EAA1B;AACH,KAJD;AAKH,CATD;;kBAWehB,S","file":"Logs.js","sourcesContent":["import * as express from \"express\";\n\nconst logRouter = express.Router();\n\nlogRouter.get(\"/\", (request, response) => {\n    const dispatcherMonitor = response.locals.dispatcherMonitor;\n    const lastId = request.query.lastId === \"0\" ? null : request.query.lastId;\n    const pageSize = request.query.pageSize;\n\n    dispatcherMonitor.getLogsAsync({ lastId, pageSize }).then(logs => {\n        response.status(200).send(logs);\n    }).catch(error => {\n        response.status(400).send({ message: error.message });\n    });\n});\n\nlogRouter.get(\"/:id\", (request, response) => {\n    const dispatcherMonitor = response.locals.dispatcherMonitor;\n    const logId = request.params.id;\n\n    dispatcherMonitor.getLogByIdAsync(logId).then(log => {\n        response.status(200).send(log);\n    }).catch(error => {\n        response.status(400).send({ message: error.message });\n    });\n});\n\nexport default logRouter;"]}