{"version":3,"sources":["../../../../../src/systems/DispatcherMonitorSystem/app/routes/Transactions.js"],"names":["express","transactionRouter","Router","get","request","response","dispatcherMonitor","locals","getCount","query","lastId","pageSize","filter","JSON","parse","error","status","send","message","getTransactionCountAsync","then","count","toString","catch","getTransactionsAsync","transactions","transactionId","params","id","getTransactionByIdAsync","transaction"],"mappings":";;;;;;AAAA;;IAAYA,O;;;;AAEZ,IAAMC,oBAAoBD,QAAQE,MAAR,EAA1B;;AAEAD,kBAAkBE,GAAlB,CAAsB,GAAtB,EAA2B,UAACC,OAAD,EAAUC,QAAV,EAAuB;AAC9C,QAAMC,oBAAoBD,SAASE,MAAT,CAAgBD,iBAA1C;AACA,QAAME,WAAWJ,QAAQK,KAAR,CAAcD,QAA/B;AACA,QAAME,SAASN,QAAQK,KAAR,CAAcC,MAA7B;AACA,QAAMC,WAAWP,QAAQK,KAAR,CAAcE,QAA/B;AACA,QAAIC,SAASR,QAAQK,KAAR,CAAcG,MAA3B;;AAEA,QAAIA,MAAJ,EAAY;AACR,YAAI;AACAA,qBAASC,KAAKC,KAAL,CAAWF,MAAX,CAAT;AACH,SAFD,CAEE,OAAOG,KAAP,EAAc;AACZ,mBAAOV,SAASW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAAEC,SAASH,MAAMG,OAAjB,EAA1B,CAAP;AACH;AACJ;;AAED,QAAIV,aAAa,MAAjB,EAAyB;AACrBF,0BAAkBa,wBAAlB,CAA2CP,MAA3C,EAAmDQ,IAAnD,CAAwD,iBAAS;AAC7Df,qBAASW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BI,MAAMC,QAAN,EAA1B;AACH,SAFD,EAEGC,KAFH,CAES,iBAAS;AACdlB,qBAASW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAAEC,SAASH,MAAMG,OAAjB,EAA1B;AACH,SAJD;AAKH,KAND,MAMO;AACHZ,0BAAkBkB,oBAAlB,CAAuC,EAAEd,cAAF,EAAUC,kBAAV,EAAvC,EAA6DS,IAA7D,CAAkE,wBAAgB;AAC9Ef,qBAASW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BQ,YAA1B;AACH,SAFD,EAEGF,KAFH,CAES,iBAAS;AACdlB,qBAASW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAAEC,SAASH,MAAMG,OAAjB,EAA1B;AACH,SAJD;AAKH;AACJ,CA5BD;;AA8BAjB,kBAAkBE,GAAlB,CAAsB,MAAtB,EAA8B,UAACC,OAAD,EAAUC,QAAV,EAAuB;AACjD,QAAMC,oBAAoBD,SAASE,MAAT,CAAgBD,iBAA1C;AACA,QAAMoB,gBAAgBtB,QAAQuB,MAAR,CAAeC,EAArC;;AAEAtB,sBAAkBuB,uBAAlB,CAA0CH,aAA1C,EAAyDN,IAAzD,CAA8D,uBAAe;AACzEf,iBAASW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0Ba,WAA1B;AACH,KAFD,EAEGP,KAFH,CAES,iBAAS;AACdlB,iBAASW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,EAAEC,SAASH,MAAMG,OAAjB,EAA1B;AACH,KAJD;AAKH,CATD;;kBAWejB,iB","file":"Transactions.js","sourcesContent":["import * as express from \"express\";\n\nconst transactionRouter = express.Router();\n\ntransactionRouter.get(\"/\", (request, response) => {\n    const dispatcherMonitor = response.locals.dispatcherMonitor;\n    const getCount = request.query.getCount;\n    const lastId = request.query.lastId;\n    const pageSize = request.query.pageSize;\n    let filter = request.query.filter;\n\n    if (filter) {\n        try {\n            filter = JSON.parse(filter)\n        } catch (error) {\n            return response.status(400).send({ message: error.message });\n        }\n    }\n\n    if (getCount === \"true\") {\n        dispatcherMonitor.getTransactionCountAsync(filter).then(count => {\n            response.status(200).send(count.toString());\n        }).catch(error => {\n            response.status(400).send({ message: error.message });\n        });\n    } else {\n        dispatcherMonitor.getTransactionsAsync({ lastId, pageSize }).then(transactions => {\n            response.status(200).send(transactions);\n        }).catch(error => {\n            response.status(400).send({ message: error.message });\n        });\n    }\n});\n\ntransactionRouter.get(\"/:id\", (request, response) => {\n    const dispatcherMonitor = response.locals.dispatcherMonitor;\n    const transactionId = request.params.id;\n\n    dispatcherMonitor.getTransactionByIdAsync(transactionId).then(transaction => {\n        response.status(200).send(transaction);\n    }).catch(error => {\n        response.status(400).send({ message: error.message });\n    })\n});\n\nexport default transactionRouter;"]}