{"version":3,"sources":["../../src/tests/ClarityTransactionDispatcher.js"],"names":["mongoDb","exports","clean","getDatabaseAsync","then","db","Promise","all","collection","remove","prepare","isInMemory","startAsync","destroy","stopAsync","throws","error","dispatcher","equal","isInitialized","entity","addEntityAsync","components","type","find","toArray","results","length","addServiceAsync","service","services","isActivated","system","activatedAsync","initializeAsync","getGuid","getName","addSystemAsync","isDeactivated","deactivatedAsync","deactivateSystemAsync","isDisposed","disposeAsync","disposeSystemAsync"],"mappings":";;AAAA;;;;AACA;;;;AAEA,IAAIA,UAAU,IAAd;;AAEAC,QAAQC,KAAR,GAAgB,YAAU;AACtB,WAAOF,QAAQG,gBAAR,GAA2BC,IAA3B,CAAgC,UAACC,EAAD,EAAM;AACzC,eAAOC,QAAQC,GAAR,CAAY,CACfF,GAAGG,UAAH,CAAc,UAAd,EAA0BC,MAA1B,CAAiC,EAAjC,CADe,EAEfJ,GAAGG,UAAH,CAAc,YAAd,EAA4BC,MAA5B,CAAmC,EAAnC,CAFe,CAAZ,CAAP;AAIH,KALM,CAAP;AAMH,CAPD;;AASAR,QAAQS,OAAR,GAAkB,YAAY;AAC1BV,cAAU,mBAAY;AAClBW,oBAAY;AADM,KAAZ,CAAV;AAGA,WAAOX,QAAQY,UAAR,EAAP;AACH,CALD;;AAOAX,QAAQY,OAAR,GAAkB,YAAY;AAC1B,WAAOb,QAAQc,SAAR,EAAP;AACH,CAFD;;AAIAb,QAAQ,iDAAR,IAA6D,YAAY;AACrE,qBAAOc,MAAP,CAAc,UAACC,KAAD,EAAW;AACrB,YAAIC,aAAa,yCAAjB;AACH,KAFD,EAEG,6CAFH;AAGH,CAJD;;AAMAhB,QAAQ,wDAAR,IAAoE,YAAY;AAC5E,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;AACH,CAFD;;AAIAC,QAAQ,yCAAR,IAAqD,YAAY;AAC7D,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;;AAEA,WAAOiB,WAAWL,UAAX,GAAwBR,IAAxB,CAA6B,YAAM;AACtC,yBAAOc,KAAP,CAAalB,QAAQmB,aAArB,EAAoC,IAApC;AACH,KAFM,CAAP;AAGH,CAND;;AAQAlB,QAAQ,wCAAR,IAAoD,YAAY;AAC5D,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;;AAEA,WAAOiB,WAAWL,UAAX,GAAwBR,IAAxB,CAA6B,YAAM;AACtC,yBAAOc,KAAP,CAAalB,QAAQmB,aAArB,EAAoC,IAApC;AACA,eAAOF,WAAWH,SAAX,EAAP;AACH,KAHM,EAGJV,IAHI,CAGC,YAAM;AACV,yBAAOc,KAAP,CAAalB,QAAQmB,aAArB,EAAoC,KAApC;AACH,KALM,CAAP;AAMH,CATD;;AAWAlB,QAAQ,0EAAR,IAAsF,YAAY;AAC9F,qBAAOc,MAAP,CAAc,YAAM;AAChB,YAAIE,aAAa,wCAAiCjB,OAAjC,CAAjB;AACA,YAAIoB,SAAS,EAAb;AACAH,mBAAWI,cAAX,CAA0BD,MAA1B;AACH,KAJD,EAIG,+DAJH;AAMH,CAPD;;AASAnB,QAAQ,8CAAR,IAA0D,YAAY;AAClE,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;AACA,QAAIQ,aAAa,IAAjB;;AAEA,WAAOS,WAAWL,UAAX,GAAwBR,IAAxB,CAA6B,YAAM;AACtC,eAAOa,WAAWI,cAAX,CAA0B,EAAEC,YAAY,CAAC,EAAEC,MAAM,MAAR,EAAD,CAAd,EAA1B,CAAP;AACH,KAFM,EAEJnB,IAFI,CAEC,YAAM;AACV,eAAOJ,QAAQG,gBAAR,EAAP;AACH,KAJM,EAIJC,IAJI,CAIC,UAACC,EAAD,EAAQ;AACZG,qBAAaH,GAAGG,UAAH,CAAc,UAAd,CAAb;AACA,eAAOA,WAAWgB,IAAX,GAAkBC,OAAlB,EAAP;AACH,KAPM,EAOJrB,IAPI,CAOC,UAACsB,OAAD,EAAa;AACjB,yBAAOR,KAAP,CAAaQ,QAAQC,MAArB,EAA6B,CAA7B;AACH,KATM,EASJvB,IATI,CASC,YAAM;AACV,eAAOI,WAAWC,MAAX,CAAkB,EAAlB,CAAP;AACH,KAXM,CAAP;AAYH,CAhBD;;AAkBAR,QAAQ,2EAAR,IAAuF,YAAY;AAC/F,qBAAOc,MAAP,CAAc,YAAM;AAChB,YAAIE,aAAa,wCAAiCjB,OAAjC,CAAjB;AACAiB,mBAAWW,eAAX,CAA2B,EAA3B;AACH,KAHD,EAGG,+DAHH;AAKH,CAND;;AAQA3B,QAAQ,+CAAR,IAA2D,YAAY;AACnE,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;AACA,QAAI6B,UAAU,EAAd;;AAEA,WAAOZ,WAAWL,UAAX,GAAwBR,IAAxB,CAA6B,YAAM;AACtC,eAAOa,WAAWW,eAAX,CAA2B,WAA3B,EAAwCC,OAAxC,CAAP;AACH,KAFM,EAEJzB,IAFI,CAEC,YAAM;AACV,yBAAOc,KAAP,CAAaD,WAAWa,QAAX,CAAoB,WAApB,CAAb,EAA+CD,OAA/C;AACH,KAJM,CAAP;AAKH,CATD;;AAYA5B,QAAQ,8CAAR,IAA0D,YAAY;AAClE,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;;AAEA,QAAI+B,cAAc,KAAlB;AACA,QAAIZ,gBAAgB,KAApB;;AAEA,QAAIa,SAAS;AACTC,wBAAgB,0BAAM;AAClBF,0BAAc,IAAd;AACH,SAHQ;AAITG,yBAAiB,2BAAM;AACnBf,4BAAgB,IAAhB;AACH,SANQ;AAOTgB,iBAAS,mBAAM;AACX,mBAAO,MAAP;AACH,SATQ;AAUTC,iBAAS,mBAAM;AACX,mBAAO,MAAP;AACH;AAZQ,KAAb;;AAeA,WAAOnB,WAAWL,UAAX,GAAwBR,IAAxB,CAA6B,YAAM;AACtC,eAAOa,WAAWoB,cAAX,CAA0BL,MAA1B,CAAP;AACH,KAFM,EAEJ5B,IAFI,CAEC,YAAM;AACV,yBAAOc,KAAP,CAAaa,WAAb,EAA0B,IAA1B;AACA,yBAAOb,KAAP,CAAaC,aAAb,EAA4B,IAA5B;AACH,KALM,CAAP;AAMH,CA3BD;;AA6BAlB,QAAQ,qDAAR,IAAiE,YAAY;AACzE,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;;AAEA,QAAI+B,cAAc,KAAlB;AACA,QAAIZ,gBAAgB,KAApB;AACA,QAAImB,gBAAgB,KAApB;;AAEA,QAAIN,SAAS;AACTC,wBAAgB,0BAAM;AAClBF,0BAAc,IAAd;AACH,SAHQ;AAITG,yBAAiB,2BAAM;AACnBf,4BAAgB,IAAhB;AACH,SANQ;AAOToB,0BAAkB,4BAAM;AACpBD,4BAAgB,IAAhB;AACH,SATQ;AAUTH,iBAAS,mBAAM;AACX,mBAAO,MAAP;AACH,SAZQ;AAaTC,iBAAS,mBAAM;AACX,mBAAO,MAAP;AACH;AAfQ,KAAb;;AAkBA,WAAOnB,WAAWL,UAAX,GAAwBR,IAAxB,CAA6B,YAAM;AACtC,eAAOa,WAAWoB,cAAX,CAA0BL,MAA1B,CAAP;AACH,KAFM,EAEJ5B,IAFI,CAEC,YAAM;AACV,yBAAOc,KAAP,CAAaa,WAAb,EAA0B,IAA1B;AACA,yBAAOb,KAAP,CAAaC,aAAb,EAA4B,IAA5B;AACH,KALM,EAKJf,IALI,CAKC,YAAM;AACV,eAAOa,WAAWuB,qBAAX,CAAiCR,MAAjC,CAAP;AACH,KAPM,EAOJ5B,IAPI,CAOC,YAAM;AACV,yBAAOc,KAAP,CAAaoB,aAAb,EAA4B,IAA5B;AACH,KATM,CAAP;AAUH,CAnCD;;AAqCArC,QAAQ,kDAAR,IAA8D,YAAY;AACtE,QAAIgB,aAAa,wCAAiCjB,OAAjC,CAAjB;;AAEA,QAAI+B,cAAc,KAAlB;AACA,QAAIZ,gBAAgB,KAApB;AACA,QAAImB,gBAAgB,KAApB;AACA,QAAIG,aAAa,KAAjB;;AAEA,QAAIT,SAAS;AACTC,wBAAgB,0BAAM;AAClBF,0BAAc,IAAd;AACH,SAHQ;AAITG,yBAAiB,2BAAM;AACnBf,4BAAgB,IAAhB;AACH,SANQ;AAOToB,0BAAkB,4BAAM;AACpBD,4BAAgB,IAAhB;AACH,SATQ;AAUTI,sBAAc,wBAAM;AAChBD,yBAAa,IAAb;AACH,SAZQ;AAaTN,iBAAS,mBAAM;AACX,mBAAO,MAAP;AACH,SAfQ;AAgBTC,iBAAS,mBAAM;AACX,mBAAO,MAAP;AACH;AAlBQ,KAAb;;AAqBA,WAAOnB,WAAWL,UAAX,GAAwBR,IAAxB,CAA6B,YAAM;AACtC,eAAOa,WAAWoB,cAAX,CAA0BL,MAA1B,CAAP;AACH,KAFM,EAEJ5B,IAFI,CAEC,YAAM;AACV,yBAAOc,KAAP,CAAaa,WAAb,EAA0B,IAA1B;AACA,yBAAOb,KAAP,CAAaC,aAAb,EAA4B,IAA5B;AACH,KALM,EAKJf,IALI,CAKC,YAAM;AACV,eAAOa,WAAW0B,kBAAX,CAA8BX,MAA9B,CAAP;AACH,KAPM,EAOJ5B,IAPI,CAOC,YAAM;AACV,yBAAOc,KAAP,CAAaoB,aAAb,EAA4B,KAA5B;AACA,yBAAOpB,KAAP,CAAauB,UAAb,EAAyB,IAAzB;AACH,KAVM,CAAP;AAWH,CAxCD","file":"ClarityTransactionDispatcher.js","sourcesContent":["import assert from \"assert\";\nimport { ClarityTransactionDispatcher, MongoDb } from \"./../index\";\n\nvar mongoDb = null;\n\nexports.clean = function(){\n    return mongoDb.getDatabaseAsync().then((db)=>{\n        return Promise.all([\n            db.collection(\"entities\").remove({}), \n            db.collection(\"systemData\").remove({})\n        ]);\n    });\n};\n\nexports.prepare = function () {\n    mongoDb = new MongoDb({\n        isInMemory: true\n    });\n    return mongoDb.startAsync();\n};\n\nexports.destroy = function () {\n    return mongoDb.stopAsync();\n};\n\nexports[\"ClarityTransactionDispatcher.constructor: Empty\"] = function () {\n    assert.throws((error) => {\n        var dispatcher = new ClarityTransactionDispatcher();\n    }, \"Expected the constructor to throw an error.\");\n};\n\nexports[\"ClarityTransactionDispatcher.constructor: With MongoDb\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n};\n\nexports[\"ClarityTransactionDispatcher.startAsync\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    return dispatcher.startAsync().then(() => {\n        assert.equal(mongoDb.isInitialized, true);\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.stopAsync\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    return dispatcher.startAsync().then(() => {\n        assert.equal(mongoDb.isInitialized, true);\n        return dispatcher.stopAsync();\n    }).then(() => {\n        assert.equal(mongoDb.isInitialized, false);\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.addEntityAsync without invoking startAsync.\"] = function () {\n    assert.throws(() => {\n        var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n        var entity = {};\n        dispatcher.addEntityAsync(entity);\n    }, \"Expected to throw an error without invoking startAsync first.\");\n\n};\n\nexports[\"ClarityTransactionDispatcher.addEntityAsync.\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n    var collection = null;\n\n    return dispatcher.startAsync().then(() => {\n        return dispatcher.addEntityAsync({ components: [{ type: \"test\" }] });\n    }).then(() => {\n        return mongoDb.getDatabaseAsync();\n    }).then((db) => {\n        collection = db.collection(\"entities\");\n        return collection.find().toArray();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n    }).then(() => {\n        return collection.remove({});\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.addServiceAsync without invoking startAsync.\"] = function () {\n    assert.throws(() => {\n        var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n        dispatcher.addServiceAsync({});\n    }, \"Expected to throw an error without invoking startAsync first.\");\n\n};\n\nexports[\"ClarityTransactionDispatcher.addServiceAsync.\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n    var service = {};\n\n    return dispatcher.startAsync().then(() => {\n        return dispatcher.addServiceAsync(\"myService\", service);\n    }).then(() => {\n        assert.equal(dispatcher.services[\"myService\"], service);\n    });\n};\n\n\nexports[\"ClarityTransactionDispatcher.addSystemAsync.\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    var isActivated = false;\n    var isInitialized = false;\n\n    var system = {\n        activatedAsync: () => {\n            isActivated = true;\n        },\n        initializeAsync: () => {\n            isInitialized = true;\n        },\n        getGuid: () => {\n            return \"test\"\n        },\n        getName: () => {\n            return \"Test\"\n        }\n    };\n\n    return dispatcher.startAsync().then(() => {\n        return dispatcher.addSystemAsync(system);\n    }).then(() => {\n        assert.equal(isActivated, true);\n        assert.equal(isInitialized, true);\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.deactivateSystemAsync.\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    var isActivated = false;\n    var isInitialized = false;\n    var isDeactivated = false;\n\n    var system = {\n        activatedAsync: () => {\n            isActivated = true;\n        },\n        initializeAsync: () => {\n            isInitialized = true;\n        },\n        deactivatedAsync: () => {\n            isDeactivated = true;\n        },\n        getGuid: () => {\n            return \"test\"\n        },\n        getName: () => {\n            return \"Test\"\n        }\n    };\n\n    return dispatcher.startAsync().then(() => {\n        return dispatcher.addSystemAsync(system);\n    }).then(() => {\n        assert.equal(isActivated, true);\n        assert.equal(isInitialized, true);\n    }).then(() => {\n        return dispatcher.deactivateSystemAsync(system);\n    }).then(() => {\n        assert.equal(isDeactivated, true);\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.disposeSystemAsync.\"] = function () {\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    var isActivated = false;\n    var isInitialized = false;\n    var isDeactivated = false;\n    var isDisposed = false;\n\n    var system = {\n        activatedAsync: () => {\n            isActivated = true;\n        },\n        initializeAsync: () => {\n            isInitialized = true;\n        },\n        deactivatedAsync: () => {\n            isDeactivated = true;\n        },\n        disposeAsync: () => {\n            isDisposed = true;\n        },\n        getGuid: () => {\n            return \"test\"\n        },\n        getName: () => {\n            return \"Test\"\n        }\n    };\n\n    return dispatcher.startAsync().then(() => {\n        return dispatcher.addSystemAsync(system);\n    }).then(() => {\n        assert.equal(isActivated, true);\n        assert.equal(isInitialized, true);\n    }).then(() => {\n        return dispatcher.disposeSystemAsync(system);\n    }).then(() => {\n        assert.equal(isDeactivated, false);\n        assert.equal(isDisposed, true);\n    });\n};"]}