{"version":3,"sources":["../../src/tests/ClarityTransactionDispatcher.js"],"names":["exports","dispatcher","fail","error","mongoDb","startAsync","then","equal","isInitialized","stopAsync","entity","addEntityAsync","components","type","getDatabaseAsync","db","collection","json","toJSON","addServiceAsync","service","services","isActivated","system","activatedAsync","initilizeAsync","getGuid","getName","addSystemAsync","isDeactivated","deactivatedAsync","deactivateSystemAsync"],"mappings":"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","file":"ClarityTransactionDispatcher.js","sourcesContent":["import assert from \"assert\";\nimport { ClarityTransactionDispatcher, MockMongoDb } from \"./../index\";\n\nexports[\"ClarityTransactionDispatcher.constructor: Empty\"] = function () {\n    try {\n\n        var dispatcher = new ClarityTransactionDispatcher();\n        assert.fail(true, \"Expected the constructor to throw an error.\");\n\n    } catch (error) {\n\n    }\n};\n\nexports[\"ClarityTransactionDispatcher.constructor: With MongoDb\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n};\n\nexports[\"ClarityTransactionDispatcher.startAsync\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    return dispatcher.startAsync().then(() => {\n        assert.equal(mongoDb.isInitialized, true);\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.stopAsync\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    return dispatcher.startAsync().then(() => {\n        assert.equal(mongoDb.isInitialized, true);\n        return dispatcher.stopAsync();\n    }).then(() => {\n        assert.equal(mongoDb.isInitialized, false);\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.addEntityAsync without invoking startAsync.\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n    var entity = {};\n\n    try {\n        dispatcher.addEntityAsync(entity);\n        assert.fail(true, \"Expected to throw an error without invoking startAsync first.\");\n    } catch (error) {\n\n    }\n};\n\nexports[\"ClarityTransactionDispatcher.addEntityAsync.\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    return dispatcher.startAsync().then(() => {\n        return dispatcher.addEntityAsync({ components: [{ type: \"test\" }] });\n    }).then(() => {\n        return mongoDb.getDatabaseAsync();\n    }).then((db) => {\n        var collection = db.collection(\"entities\");\n        var json = collection.toJSON();\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.addServiceAsync without invoking startAsync.\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n    try {\n        dispatcher.addServiceAsync();\n        assert.fail(true, \"Expected to throw an error without invoking startAsync first.\");\n    } catch (error) {\n\n    }\n};\n\nexports[\"ClarityTransactionDispatcher.addServiceAsync.\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n    var service = {};\n\n    dispatcher.startAsync().then(() => {\n        return dispatcher.addServiceAsync(\"myService\", service);\n    }).then(() => {\n        assert.equal(dispatcher.services[\"myService\"], service);\n    });\n};\n\n\nexports[\"ClarityTransactionDispatcher.addSystemAsync.\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    var isActivated = false;\n    var isInitialized = false;\n\n    var system = {\n        activatedAsync: () => {\n            isActivated = true;\n        },\n        initilizeAsync: () => {\n            isInitialized = true;\n        },\n        getGuid: () => {\n            return \"test\"\n        },\n        getName: () => {\n            return \"Test\"\n        }\n    };\n\n    dispatcher.startAsync().then(() => {\n        return dispatcher.addSystemAsync(system);\n    }).then(() => {\n        assert.equal(isActivated, true);\n        assert.equal(isInitialized, true);\n    });\n};\n\nexports[\"ClarityTransactionDispatcher.deactivateSystemAsync.\"] = function () {\n    var mongoDb = new MockMongoDb();\n    var dispatcher = new ClarityTransactionDispatcher(mongoDb);\n\n    var isActivated = false;\n    var isInitialized = false;\n    var isDeactivated = false;\n\n    var system = {\n        activatedAsync: () => {\n            isActivated = true;\n        },\n        initilizeAsync: () => {\n            isInitialized = true;\n        },\n        deactivatedAsync: () => {\n            isDeactivated = true;\n        },\n        getGuid: () => {\n            return \"test\"\n        },\n        getName: () => {\n            return \"Test\"\n        }\n    };\n\n    dispatcher.startAsync().then(() => {\n        return dispatcher.addSystemAsync(system);\n    }).then(() => {\n        assert.equal(isActivated, true);\n        assert.equal(isInitialized, true);\n    }).then(() => {\n        return dispatcher.deactivateSystemAsync(system);\n    }).then(() => {\n        assert.equal(isDeactivated, true);\n    });\n};"]}