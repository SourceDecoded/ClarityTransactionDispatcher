{"version":3,"sources":["../src/MockMongoDb.js"],"names":["MongoClient","ObjectID","ObjectId","resolvedPromise","Promise","resolve","defaultMongodbConfig","databaseName","ip","port","isInMemory","MockMongoDb","config","Object","assign","initializingPromise","isInitialized","startAsync","then","databaseUrl","connect","getDatabaseAsync","db"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,cAAc,oBAAQA,WAA5B;AACA,IAAMC,WAAW,oBAAQC,QAAzB;AACA,IAAMC,kBAAkBC,QAAQC,OAAR,EAAxB;AACA,IAAMC,uBAAuB;AACzBC,kBAAc,gCADW;AAEzBC,QAAI,WAFqB;AAGzBC,UAAM,OAHmB;AAIzBC,gBAAY;AAJa,CAA7B;;IAOqBC,W;AACjB,yBAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,oBAAlB,EAAwCM,MAAxC,CAAd;AACA,aAAKG,mBAAL,GAA2B,IAA3B;AACA,aAAKC,aAAL,GAAqB,KAArB;AACH;;;;qCAEY;AACT,iBAAKD,mBAAL,GAA2BZ,eAA3B;AACA,iBAAKa,aAAL,GAAqB,IAArB;AACA,mBAAO,KAAKD,mBAAZ;AACH;;;oCAEW;AACR,iBAAKC,aAAL,GAAqB,KAArB;AACA,iBAAKD,mBAAL,GAA2B,IAA3B;;AAEA,mBAAOZ,eAAP;AACH;;;2CAEkB;AAAA;;AACf,mBAAO,KAAKc,UAAL,GAAkBC,IAAlB,CAAuB,YAAM;AAChC,oBAAIN,SAAS,MAAKA,MAAlB;AACA,oBAAIL,eAAeK,OAAOL,YAA1B;AACA,oBAAIY,6BAA2BP,OAAOJ,EAAlC,SAAwCI,OAAOH,IAA/C,SAAuDF,YAA3D;;AAEA,uBAAOP,YAAYoB,OAAZ,CAAoBD,WAApB,CAAP;AACH,aANM,CAAP;AAOH;;;yCAEgB;AACb,mBAAO,KAAKE,gBAAL,GAAwBH,IAAxB,CAA6B,UAACI,EAAD,EAAQ;AACxC,uBAAO,2BAAWA,EAAX,sBAAP;AACH,aAFM,CAAP;AAGH;;;sCAEa;AACV,mBAAOrB,QAAP;AACH;;;;;;kBAtCgBU,W","file":"MockMongoDb.js","sourcesContent":["import { MongodHelper } from \"mongodb-prebuilt\";\nimport mongodb from \"mongo-mock\";\nimport GridFs from \"gridfs-stream\";\n\nconst MongoClient = mongodb.MongoClient;\nconst ObjectID = mongodb.ObjectId;\nconst resolvedPromise = Promise.resolve();\nconst defaultMongodbConfig = {\n    databaseName: \"clarity_transaction_dispatcher\",\n    ip: \"127.0.0.1\",\n    port: \"27017\",\n    isInMemory: false\n};\n\nexport default class MockMongoDb {\n    constructor(config) {\n        this.config = Object.assign({}, defaultMongodbConfig, config);\n        this.initializingPromise = null;\n        this.isInitialized = false;\n    }\n\n    startAsync() {\n        this.initializingPromise = resolvedPromise;\n        this.isInitialized = true;\n        return this.initializingPromise;\n    }\n\n    stopAsync() {\n        this.isInitialized = false;\n        this.initializingPromise = null;\n\n        return resolvedPromise;\n    }\n\n    getDatabaseAsync() {\n        return this.startAsync().then(() => {\n            var config = this.config;\n            var databaseName = config.databaseName;\n            var databaseUrl = `mongodb://${config.ip}:${config.port}/${databaseName}`;\n\n            return MongoClient.connect(databaseUrl);\n        });\n    }\n\n    getGridFsAsync() {\n        return this.getDatabaseAsync().then((db) => {\n            return new GridFs(db, mongodb);\n        });\n    }\n\n    getObjectID() {\n        return ObjectID;\n    }\n\n\n}"]}